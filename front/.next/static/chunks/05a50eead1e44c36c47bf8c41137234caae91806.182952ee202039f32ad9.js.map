{"version":3,"sources":["webpack://_N_E/./node_modules/shortid/lib/is-valid.js","webpack://_N_E/./node_modules/nanoid/format.browser.js","webpack://_N_E/./node_modules/shortid/lib/index.js","webpack://_N_E/./node_modules/shortid/lib/random/random-byte-browser.js","webpack://_N_E/./node_modules/shortid/lib/build.js","webpack://_N_E/./node_modules/shortid/lib/alphabet.js","webpack://_N_E/./node_modules/shortid/lib/random/random-from-seed.js","webpack://_N_E/./node_modules/shortid/index.js","webpack://_N_E/./node_modules/shortid/lib/util/cluster-worker-id-browser.js","webpack://_N_E/./reducers/post.js","webpack://_N_E/./node_modules/shortid/lib/generate.js"],"names":["alphabet","module","exports","id","length","RegExp","get","replace","test","random","size","mask","Math","log","LN2","step","bytes","i","build","isValid","clusterWorkerId","generate","seed","seedValue","worker","workerId","characters","newCharacters","undefined","shuffled","randomByte","crypto","window","msCrypto","getRandomValues","Uint8Array","push","floor","counter","previousSeconds","str","seconds","Date","now","previousSeed","randomFromSeed","ORIGINAL","reset","setCharacters","_alphabet_","Error","unique","split","filter","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","splice","shuffle","lookup","index","_seed_","initialState","mainPosts","imagePaths","singlePost","hasMorePost","loadPostsLoading","loadPostsDone","loadPostsError","loadPostLoading","loadPostDone","loadPostError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_IMAGE","reducer","state","action","produce","draft","type","unshift","actino","data","error","v","find","PostId","Likers","UserId","post","concat","Comments","format","number","done","loopCounter","pow"],"mappings":"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","file":"static/chunks/05a50eead1e44c36c47bf8c41137234caae91806.182952ee202039f32ad9.js","sourcesContent":["'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nmodule.exports = 0;\n","import shortId from 'shortid';\r\nimport produce from 'immer';\r\n// import faker from 'faker';\r\n\r\nexport const initialState = {\r\n    // mainPosts: [{\r\n    //     id: 1,\r\n    //     User: {\r\n    //         id: 1,\r\n    //         nickname: 'tonymoon',\r\n    //     },\r\n    //     content: 'first post #express',\r\n    //     Images: [{\r\n    //         id: shortId.generate(),\r\n    //         src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?update=2018726',\r\n    //     }, {\r\n    //         id: shortId.generate(),\r\n    //         src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\r\n    //     }, {\r\n    //         id: shortId.generate(),\r\n    //         src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\r\n    //     }],\r\n    //     Comments: [{\r\n    //         id: shortId.generate(),\r\n    //         User: {\r\n    //             id: shortId.generate(),\r\n    //             nickname: 'nero',\r\n    //         },\r\n    //         content: 'congratulation!',        \r\n    //     }, {\r\n    //         id: shortId.generate(),\r\n    //         User: {\r\n    //             id: shortId.generate(),\r\n    //             nickname: 'moon',\r\n    //         },\r\n    //         content: 'haha nice',\r\n    //     }]\r\n    // }],\r\n    mainPosts: [],\r\n    imagePaths: [],\r\n    singlePost: null,\r\n    hasMorePost: true,\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError: null,\r\n    loadPostLoading: false,\r\n    loadPostDone: false,\r\n    loadPostError: null,\r\n    likePostLoading: false,\r\n    likePostDone: false,\r\n    likePostError: null,\r\n    unlikePostLoading: false,\r\n    unlikePostDone: false,\r\n    unlikePostError: null,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n    uploadImagesLoading: false,\r\n    uploadImagesDone: false,\r\n    uploadImagesError: null,\r\n    retweetLoading: false,\r\n    retweetDone: false,\r\n    retweetError: null,\r\n}\r\n\r\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n//     id: shortId.generate(),\r\n//     User: {\r\n//         id: shortId.generate(),\r\n//         nickname: faker.name.findName()\r\n//     },\r\n//     content: faker.lorem.paragraph,\r\n//     Images: [{\r\n//         src: faker.image.image(),\r\n//     }],\r\n//     Comments: [{\r\n//         User: {\r\n//             id: shortId.generate(),\r\n//             nickname: faker.name.findName()\r\n//         },\r\n//         content: faker.lorem.sentence(),\r\n//     }],\r\n// }));\r\n\r\n// initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';     \r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS'; \r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE'; \r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';    //오타방지 차원에서 변수로 빼주는게 좋다. \r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS'; \r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE'; \r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';    \r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS'; \r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE'; \r\n\r\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';    \r\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS'; \r\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE'; \r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';    \r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS'; \r\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE'; \r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';    \r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS'; \r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE'; \r\n\r\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';    \r\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS'; \r\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE'; \r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';    \r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS'; \r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE'; \r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';   \r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS'; \r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE'; \r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';    \r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS'; \r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE'; \r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';    \r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS'; \r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE'; \r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\n\r\n// const dummyPost = (data) => ({\r\n//     id: shortId.generate(),\r\n//     content: data,\r\n//     User: {\r\n//         id: 1,\r\n//         nickname: 'Tony',\r\n//     },\r\n//     Images: [],\r\n//     Comments: [],\r\n// });\r\n\r\n// const dummyComment = (data) => ({\r\n//     id: data.id,\r\n//     content: data.content,\r\n//     User: {\r\n//         id: 1,\r\n//         nickname: 'Tony',\r\n//     },\r\n// });\r\n\r\n// 이전 상태를 액션을 통해 다음상태로 만들어내는 함수 (불변성은 지키면서.)\r\nconst reducer = (state = initialState, action) => {\r\n    //immer (produce) 를 사용하면 알아서 불변성을 지켜준다.\r\n    return produce(state, (draft) => {\r\n        switch (action.type) { \r\n            case RETWEET_REQUEST:\r\n                draft.retweetLoading = true;\r\n                draft.retweetDone = false;\r\n                draft.retweetError = null;\r\n                break;\r\n            case RETWEET_SUCCESS:{\r\n                draft.retweetLoading = false;\r\n                draft.retweetDone = true;   \r\n                draft.mainPosts.unshift(actino.data);             \r\n                break;    \r\n            }\r\n            case RETWEET_FAILURE:\r\n                draft.retweetLoading = false;\r\n                draft.retweetError = action.error;\r\n                break;            \r\n            case REMOVE_IMAGE:  //이건 동기 함수, 나머진 비동기\r\n                draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\r\n                break;\r\n            case UPLOAD_IMAGES_REQUEST:\r\n                draft.uploadImagesLoading = true;\r\n                draft.uploadImagesDone = false;\r\n                draft.uploadImagesError = null;\r\n                break;\r\n            case UPLOAD_IMAGES_SUCCESS:{\r\n                draft.imagePaths = action.data;\r\n                draft.uploadImagesLoading = false;\r\n                draft.uploadImagesDone = true;                \r\n                break;    \r\n            }\r\n            case UPLOAD_IMAGES_FAILURE:\r\n                draft.uploadImagesLoading = false;\r\n                draft.uploadImagesError = action.error;\r\n                break;            \r\n            case LIKE_POST_REQUEST:\r\n                draft.likePostLoading = true;\r\n                draft.likePostDone = false;\r\n                draft.likePostError = null;\r\n                break;\r\n            case LIKE_POST_SUCCESS:{\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n                post.Likers.push({ id: action.data.UserId });\r\n                draft.likePostLoading = false;\r\n                draft.likePostDone = true;                \r\n                break;    \r\n            }\r\n            case LIKE_POST_FAILURE:\r\n                draft.likePostLoading = false;\r\n                draft.likePostError = action.error;\r\n                break;            \r\n            case UNLIKE_POST_REQUEST:\r\n                draft.unlikePostLoading = true;\r\n                draft.unlikePostDone = false;\r\n                draft.unlikePostError = null;\r\n                break;\r\n            case UNLIKE_POST_SUCCESS:{\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n                post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n                draft.unlikePostLoading = false;\r\n                draft.unlikePostDone = true;                \r\n                break;    \r\n            }\r\n            case UNLIKE_POST_FAILURE:\r\n                draft.unlikePostLoading = false;\r\n                draft.unlikePostError = action.error;\r\n                    break;          \r\n            case LOAD_USER_POSTS_REQUEST:\r\n            case LOAD_HASHTAG_POSTS_REQUEST:         \r\n            case LOAD_POSTS_REQUEST:\r\n                draft.loadPostsLoading = true;\r\n                draft.loadPostsDone = false;\r\n                draft.loadPostsError = null;\r\n                break;\r\n            case LOAD_USER_POSTS_SUCCESS:\r\n            case LOAD_HASHTAG_POSTS_SUCCESS:   \r\n            case LOAD_POSTS_SUCCESS:\r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsDone = true;\r\n                draft.mainPosts = action.mainPosts.concat(action.data);\r\n                draft.hasMorePost = draft.data.length === 10;\r\n                break;    \r\n            case LOAD_USER_POSTS_FAILURE:\r\n            case LOAD_HASHTAG_POSTS_FAILURE:\r\n            case LOAD_POSTS_FAILURE:\r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsError = action.error;\r\n                break;            \r\n            case LOAD_POST_REQUEST:\r\n            draft.loadPostLoading = true;\r\n            draft.loadPostDone = false;\r\n            draft.loadPostError = null;\r\n            break;\r\n            case LOAD_POST_SUCCESS:\r\n                draft.loadPostLoading = false;\r\n                draft.loadPostDone = true;\r\n                draft.singlePost = action.data;\r\n                break;    \r\n            case LOAD_POST_FAILURE:\r\n                draft.loadPostLoading = false;\r\n                draft.loadPostError = action.error;\r\n                break;              \r\n            case ADD_POST_REQUEST:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n                // return {\r\n                //     ...state,\r\n                //     addPostLoading: true,\r\n                //     addPostDone: false,\r\n                //     addPostError: null,\r\n                // }\r\n            case ADD_POST_SUCCESS:\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = true;\r\n                draft.mainPosts.unshift(action.data);\r\n                draft.imagePaths = [];\r\n                break;\r\n                // return {\r\n                //     ...state,\r\n                //     mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n                //     addPostLoading: false,\r\n                //     addPostDone: true,\r\n                // };\r\n    \r\n            case ADD_POST_FAILURE:\r\n                draft.addPostLoading = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n                // return {\r\n                //     ...state,\r\n                //     addPostLoading: false,\r\n                //     addPostError: action.error,\r\n                // }\r\n            case REMOVE_POST_REQUEST:\r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n                // return {\r\n                //     ...state,\r\n                //     removePostLoading: true,\r\n                //     removePostDone: false,\r\n                //     removePostError: null,\r\n                // }\r\n            case REMOVE_POST_SUCCESS:\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = true;\r\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\r\n                break;\r\n                // return {\r\n                //     ...state,\r\n                //     mainPosts: state.mainPosts.filter((v) => v.id !== action.data),\r\n                //     removePostLoading: false,\r\n                //     removePostDone: true,\r\n                // };\r\n    \r\n            case REMOVE_POST_FAILURE:\r\n                draft.removePostLoading = false;\r\n                draft.removePostError = action.error;\r\n                break;\r\n                // return {\r\n                //     ...state,\r\n                //     removePostLoading: false,\r\n                //     removePostError: action.error,\r\n                // }\r\n            case ADD_COMMENT_REQUEST:\r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n                // return {\r\n                //     ...state,\r\n                //     addCommentLoading: true,\r\n                //     addCommentDone: false,\r\n                //     addCommentError: null,\r\n                // }\r\n            case ADD_COMMENT_SUCCESS: {\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n                post.Comments.unshift(action.data);\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;\r\n                // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n                // const post = { ...state.mainPosts[postIndex] };\r\n                // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = post;\r\n                // return {\r\n                //     ...state,\r\n                //     mainPosts,\r\n                //     addCommentLoading: false,\r\n                //     addCommentDone: true,\r\n                // };            \r\n            }\r\n            case ADD_COMMENT_FAILURE:\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentError = action.error;\r\n                break;\r\n                // return {\r\n                //     ...state,\r\n                //     addCommentLoading: false,\r\n                //     addCommentError: action.error,\r\n                // }\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n\r\n\r\n    \r\n};\r\n\r\nexport default reducer;","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n"],"sourceRoot":""}