{"version":3,"sources":["webpack://_N_E/./components/PostForm.js","webpack://_N_E/./pages/index.js","webpack://_N_E/./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js"],"names":["PostForm","useSelector","state","post","imagePaths","addPostDone","dispatch","useDispatch","useInput","text","onChangeText","setText","useEffect","onSubmit","useCallback","trim","alert","formData","FormData","forEach","p","append","value","console","log","type","ADD_POST_REQUEST","data","imageInput","useRef","onClickImageUpload","current","click","onChangeImages","e","target","files","imageFormData","call","f","UPLOAD_IMAGES_REQUEST","onRemoveImage","index","REMOVE_IMAGE","style","margin","encType","onFinish","TextArea","onChange","maxLength","placeholder","name","multiple","hidden","ref","onClick","float","htmlType","map","v","i","key","display","src","width","alt","Home","me","user","mainPosts","hasMorePost","loadPostsLoading","retweetError","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","LOAD_POSTS_REQUEST","addEventListener","removeEventListener","AppLayout","PostCard","__NEXT_P","push"],"mappings":"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","file":"static/chunks/pages/index-4a87e06ed21c915f23fa.js","sourcesContent":["import React, { useCallback, useRef, useEffect  } from 'react';\r\nimport { Button, Form, Input } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE, ADD_POST_REQUEST } from '../reducers/post';\r\nimport useInput from '../hooks/useInput';\r\n\r\n\r\nconst PostForm = () => {\r\n    const { imagePaths, addPostDone } = useSelector((state) => state.post);\r\n    const dispatch = useDispatch();\r\n    const [text, onChangeText, setText] = useInput('');\r\n\r\n    useEffect(() => {\r\n        if (addPostDone) {\r\n            setText('');\r\n        }\r\n    }, [addPostDone])\r\n\r\n    // const onChangeText = useCallback((e) => {\r\n    //     setText(e.target.value);\r\n    // }, []);\r\n\r\n    const onSubmit = useCallback(() => {\r\n        if (!text || !text.trim()) {\r\n            return alert('please write the form');\r\n        }\r\n        const formData = new FormData();\r\n        imagePaths.forEach((p) => {\r\n            formData.append('image', p);\r\n        });\r\n        formData.append('content', text);\r\n        \r\n        for (const value of formData) {\r\n            console.log(value);\r\n        }\r\n        return dispatch({\r\n            type: ADD_POST_REQUEST,\r\n            data: formData,\r\n        });\r\n    }, [text, imagePaths]);\r\n\r\n    const imageInput = useRef();\r\n    const onClickImageUpload = useCallback(() => {\r\n        imageInput.current.click();\r\n    }, [imageInput.current]);\r\n\r\n    const onChangeImages = useCallback((e) => {\r\n        console.log('images', e.target.files);\r\n        const imageFormData = new FormData(); //FormData() 형식으로 보내준다 그리고 multer가 처리\r\n        [].forEach.call(e.target.files, (f) => {\r\n            imageFormData.append('image', f);\r\n        });\r\n\r\n        for (const value of imageFormData) {\r\n            console.log(value);\r\n        }\r\n\r\n        dispatch({\r\n            type: UPLOAD_IMAGES_REQUEST,\r\n            data: imageFormData,\r\n        });\r\n    }, []);\r\n\r\n    const onRemoveImage = useCallback((index) => () => {\r\n        dispatch({\r\n            type: REMOVE_IMAGE,\r\n            data: index,\r\n        });\r\n    });\r\n\r\n    return (\r\n        <Form style={{ margin: '10px 0 20px' }} encType=\"multipart/form-data\" onFinish={onSubmit}>\r\n            <Input.TextArea\r\n                value={text}\r\n                onChange={onChangeText}\r\n                maxLength={140}\r\n                placeholder={'what happened?'}\r\n            />\r\n            <div>\r\n                <input type=\"file\" name=\"image\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n                <Button onClick={onClickImageUpload}>Image upload</Button>\r\n                <Button type=\"primary\" style={{ float: 'right' }} htmlType=\"submit\">Twit!</Button>\r\n            </div>\r\n            <div>\r\n                {imagePaths.map((v, i) => ( //map안에 콜백함수에 데이터를 넣고싶으면 고차함수를 사용.\r\n                    <div key={v} style={{ display: 'inline-block' }}>\r\n                        <img src={`http://localhost:3065/${v}`} style={{ width: '200px' }} alt={v} />\r\n                        <div>\r\n                            <Button onClick={onRemoveImage(i)}>Delete</Button>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </Form>\r\n    )\r\n};\r\n\r\nexport default PostForm;","// because of next.js, don't need to import.\r\n// but the folder should be 'pages' because next recognize 'pages' folder and change the files into each page\r\n\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { END } from 'redux-saga';\r\nimport axios from 'axios';\r\nimport AppLayout from \"../components/AppLayout\";\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\r\nimport wrapper from '../store/configureStore';\r\n\r\nconst Home = () => {\r\n    const dispatch = useDispatch();    \r\n    const { me } = useSelector((state) => state.user);      //구조분해.\r\n    const { mainPosts, hasMorePost, loadPostsLoading, retweetError } = useSelector((state) => state.post);\r\n\r\n    useEffect(() => {\r\n        if (retweetError) {\r\n            alert(retweetError);\r\n        }\r\n    }, [retweetError]);\r\n\r\n\r\n    useEffect(() => {\r\n        function onScroll() {\r\n            console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\r\n            if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n                if (hasMorePost && !loadPostsLoading) {\r\n                    const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n                    dispatch({\r\n                        type: LOAD_POSTS_REQUEST,\r\n                        lastId,\r\n                    });\r\n                }                \r\n            }\r\n        }\r\n        window.addEventListener('scroll', onScroll);\r\n        return () => {\r\n            window.removeEventListener('scroll', onScroll); //useEffect에서 window eventlister를 사용하면 remove를 해줘야한다. 안그러면 메모리에 쌓임.\r\n        };\r\n    }, [hasMorePost, loadPostsLoading, mainPosts]);\r\n\r\n\r\n    return (\r\n        <AppLayout>\r\n            {me && <PostForm />}\r\n            {mainPosts.map((post) => <PostCard key={post.id} post={post} />)}\r\n        </AppLayout>\r\n    );\r\n}\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context ) => {\r\n    const cookie = context.req ? context.req.headers.cookie : '';\r\n    axios.defaults.headers.Cookie = '';       \r\n    //서버에서 쿠키가 공유가 되기때문에 로그인이 공유되는 문제가 발생하기때문에 이런식으로 쿠키를 지웠다가 채운다.\r\n    if (context.req && cookie) {\r\n        axios.defaults.headers.Cookie = cookie;        \r\n    }\r\n    context.store.dispatch({\r\n        type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n    context.store.dispatch({\r\n        type: LOAD_POSTS_REQUEST,\r\n    });\r\n    context.store.dispatch(END);\r\n    await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default Home;","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/\",\n      function () {\n        return require(\"private-next-pages/index.js\");\n      }\n    ]);\n  "],"sourceRoot":""}