{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tony\\\\Documents\\\\GitHub\\\\nordbird\\\\front\\\\components\\\\PostCard.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Button, Popover, Avatar, List, Comment } from 'antd';\nimport { RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined, HeartTwoTone } from '@ant-design/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PostImages from './PostImages';\nimport CommentForm from './CommentForm';\nimport PostCardContent from './PostCardContent';\nimport { LIKE_POST_REQUEST, REMOVE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\nimport FollowButton from './FollowButton';\n\nconst PostCard = ({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const {\n    removePostLoading,\n    retweetError\n  } = useSelector(state => state.post); // const [liked, setLiked] = useState(false);\n\n  const {\n    0: commetnFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    me\n  } = useSelector(state => state.user);\n  const id = me === null || me === void 0 ? void 0 : me.id;\n  const onLike = useCallback(() => {\n    //false->true / true->false 로 왔다갔다 바꿔주는 코드\n    if (!id) {\n      return alert('login is necessary');\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  const onUnLike = useCallback(() => {\n    //false->true / true->false 로 왔다갔다 바꿔주는 코드\n    if (!id) {\n      return alert('login is necessary');\n    }\n\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  const onToggleComment = useCallback(() => {\n    if (!id) {\n      return alert('login is necessary');\n    }\n\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const onRemovePost = useCallback(() => {\n    if (!id) {\n      return alert('login is necessary');\n    }\n\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  const onRetweet = useCallback(() => {\n    if (!id) {\n      return alert('login is necessary');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const liked = post.Likers.find(v => v.id === id); // const id = me && me.id;\n\n  return __jsx(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, __jsx(Card, {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 42\n      }\n    }),\n    actions: [//배열 안에 jsx를 넣을 땐 key값을 함께 넣어줘야함.\n    __jsx(RetweetOutlined, {\n      key: \"retweet\",\n      onClick: onRetweet,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }\n    }), liked ? __jsx(HeartTwoTone, {\n      twoToneColor: \"#eb2f96\",\n      key: \"heart\",\n      onClick: onUnLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 27\n      }\n    }) : __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 27\n      }\n    }), __jsx(MessageOutlined, {\n      key: \"comment\",\n      onClick: onToggleComment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }\n    }), __jsx(Popover, {\n      key: \"more\",\n      content: __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }\n      }, id && post.User.id == id ? __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 33\n        }\n      }, __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 37\n        }\n      }, \"Edit\"), __jsx(Button, {\n        type: \"danger\",\n        loading: removePostLoading,\n        onClick: onRemovePost,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 37\n        }\n      }, \"Delete\")) : __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 31\n        }\n      }, \"Report\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }\n    }, __jsx(EllipsisOutlined, {\n      key: \"retweet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 25\n      }\n    }))],\n    title: post.RetweetId ? `${post.User.nickname} retweeted.` : null,\n    extra: id && __jsx(FollowButton, {\n      post: post,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 30\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, post.RetweetId && post.Retweet ? __jsx(Card, {\n    cover: post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 58\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 21\n    }\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 37\n      }\n    }, post.Retweet.User.nickname[0]),\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 42\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 25\n    }\n  })) : __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 25\n      }\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 30\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 16\n    }\n  })), commetnFormOpened && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }, __jsx(CommentForm, {\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 21\n    }\n  }), __jsx(List, {\n    header: `${post.Comments.length}개의 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments,\n    renderItem: item => __jsx(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 29\n      }\n    }, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Avatar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 45\n        }\n      }, item.User.nickname[0]),\n      content: item.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 33\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 21\n    }\n  })));\n};\n\nPostCard.prpTypes = {\n  //.object 대신 .shape은 object 안에 있는 모든걸 다 표기해줄려고 할때 사용.\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object),\n    Likers: PropTypes.arrayOf(PropTypes.object),\n    RetweetId: PropTypes.number,\n    Retweet: PropTypes.objectOf(PropTypes.any)\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/Tony/Documents/GitHub/nordbird/front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","PropTypes","Card","Button","Popover","Avatar","List","Comment","RetweetOutlined","HeartOutlined","MessageOutlined","EllipsisOutlined","HeartTwoTone","useDispatch","useSelector","PostImages","CommentForm","PostCardContent","LIKE_POST_REQUEST","REMOVE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","FollowButton","PostCard","post","dispatch","removePostLoading","retweetError","state","commetnFormOpened","setCommentFormOpened","me","user","id","onLike","alert","type","data","onUnLike","onToggleComment","prev","onRemovePost","onRetweet","liked","Likers","find","v","marginBottom","Images","User","RetweetId","nickname","Retweet","content","Comments","length","item","prpTypes","shape","number","object","string","createdAt","arrayOf","objectOf","any","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Card, Button, Popover, Avatar, List, Comment } from 'antd';\r\nimport { RetweetOutlined, HeartOutlined, MessageOutlined,  EllipsisOutlined, HeartTwoTone } from '@ant-design/icons';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport PostImages from './PostImages';\r\nimport CommentForm from './CommentForm';\r\nimport PostCardContent from './PostCardContent';\r\nimport { LIKE_POST_REQUEST, REMOVE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\r\nimport FollowButton from './FollowButton';\r\n\r\n\r\nconst PostCard = ({ post }) => {\r\n    const dispatch = useDispatch();\r\n    const { removePostLoading, retweetError } = useSelector((state) => state.post);\r\n    // const [liked, setLiked] = useState(false);\r\n    const [commetnFormOpened, setCommentFormOpened] = useState(false);\r\n    \r\n    const { me } = useSelector((state) => state.user);\r\n    const id = me?.id;\r\n\r\n\r\n    const onLike = useCallback(() => {    //false->true / true->false 로 왔다갔다 바꿔주는 코드\r\n        if (!id) {\r\n            return alert('login is necessary');\r\n        }\r\n        return dispatch({\r\n            type: LIKE_POST_REQUEST,\r\n            data: post.id,\r\n        });\r\n    }, []);\r\n    const onUnLike = useCallback(() => {    //false->true / true->false 로 왔다갔다 바꿔주는 코드\r\n        if (!id) {\r\n            return alert('login is necessary');\r\n        }\r\n        return dispatch({\r\n            type: UNLIKE_POST_REQUEST,\r\n            data: post.id,\r\n        });\r\n    }, []);\r\n    const onToggleComment = useCallback(() => {\r\n        if (!id) {\r\n            return alert('login is necessary');\r\n        }\r\n        setCommentFormOpened((prev) => !prev);\r\n    }, []);\r\n\r\n    const onRemovePost = useCallback(() => {\r\n        if (!id) {\r\n            return alert('login is necessary');\r\n        }\r\n        return dispatch({\r\n            type: REMOVE_POST_REQUEST,\r\n            data: post.id,\r\n        });\r\n    }, []);\r\n\r\n    const onRetweet = useCallback(() => {\r\n        if (!id) {\r\n            return alert('login is necessary');\r\n        }\r\n        return dispatch({\r\n            type: RETWEET_REQUEST,\r\n            data: post.id,\r\n        })\r\n    }, [id]);\r\n\r\n    const liked = post.Likers.find((v) => v.id === id);\r\n    // const id = me && me.id;\r\n    return (\r\n        <div style={{ marginBottom: 20 }}>\r\n            <Card\r\n                cover={post.Images[0] && <PostImages images={post.Images} />}\r\n                actions={[      //배열 안에 jsx를 넣을 땐 key값을 함께 넣어줘야함.\r\n                    <RetweetOutlined key=\"retweet\" onClick={onRetweet} />,\r\n                    liked\r\n                        ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onUnLike}/>\r\n                        : <HeartOutlined key=\"heart\" onClick={onLike}/>,\r\n                    <MessageOutlined key=\"comment\" onClick={onToggleComment}/>,\r\n                    <Popover key=\"more\" content={(\r\n                        <Button.Group>\r\n                            {id && post.User.id == id \r\n                            ? (\r\n                                <div>\r\n                                    <Button>Edit</Button>\r\n                                    <Button type=\"danger\" loading={removePostLoading} onClick={onRemovePost}>Delete</Button>\r\n                                </div>\r\n                            ) \r\n                            : <Button>Report</Button>}                            \r\n                        </Button.Group>\r\n                    )}>\r\n                        <EllipsisOutlined key=\"retweet\"/>\r\n                    </Popover>\r\n                ]}\r\n                title={post.RetweetId ? `${post.User.nickname} retweeted.` : null}\r\n                extra={id && <FollowButton post={post} />}\r\n            >\r\n                {post.RetweetId && post.Retweet\r\n                ? (\r\n                    <Card\r\n                        cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}\r\n                    >\r\n                        <Card.Meta\r\n                            avatar={<Avatar>{post.Retweet.User.nickname[0]}</Avatar>}\r\n                            title={post.Retweet.User.nickname}\r\n                            description={<PostCardContent postData={post.Retweet.content} />}\r\n                        />\r\n                    </Card>\r\n                )\r\n            : (<Card.Meta\r\n                avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n                title={post.User.nickname}\r\n                description={<PostCardContent postData={post.content} />}\r\n            />)}\r\n                \r\n            </Card>\r\n            {commetnFormOpened && (\r\n                <div>\r\n                    <CommentForm post={post} />\r\n                    <List \r\n                        header={`${post.Comments.length}개의 댓글`}\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={post.Comments}\r\n                        renderItem={(item) => (\r\n                            <li>\r\n                                <Comment \r\n                                    author={item.User.nickname}\r\n                                    avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                                    content={item.content}\r\n                                />\r\n                            </li>\r\n                        )}\r\n                    />\r\n                </div>\r\n            )}\r\n            {/* <CommentForm />\r\n            <Comments /> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nPostCard.prpTypes = {   //.object 대신 .shape은 object 안에 있는 모든걸 다 표기해줄려고 할때 사용.\r\n    post: PropTypes.shape({\r\n        id: PropTypes.number,\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        createdAt: PropTypes.string,\r\n        Comments: PropTypes.arrayOf(PropTypes.object),\r\n        Images: PropTypes.arrayOf(PropTypes.object),\r\n        Likers: PropTypes.arrayOf(PropTypes.object),\r\n        RetweetId: PropTypes.number,\r\n        Retweet: PropTypes.objectOf(PropTypes.any),\r\n    }).isRequired,   \r\n};\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}