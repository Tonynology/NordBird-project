{"ast":null,"code":"var __jsx = React.createElement;\n// post/[id].js\nimport React from 'react';\nimport { END } from '@redux-saga/core';\nimport axios from 'axios';\nimport { useSelector } from 'react-redux';\nimport { useRouter } from 'next/router';\nimport AppLayout from '../../components/AppLayout';\nimport PostCard from '../../components/PostCard';\nimport { LOAD_POSTS_REQUEST } from '../../reducers/post';\nimport { LOAD_MY_INFO_REQUEST } from '../../reducers/user';\nimport wrapper from '../../store/configureStore';\n\nconst Post = () => {\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n  const {\n    singlePost\n  } = useSelector(state => state.post);\n  return __jsx(AppLayout, null, __jsx(Head, null, __jsx(\"title\", null, singlePost.User.nickname, \"post\"), __jsx(\"meta\", {\n    name: \"description\",\n    content: singlePost.content\n  }), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: `${singlePost.User.nickname}님의 게시글`\n  }), __jsx(\"meta\", {\n    property: \"og:description\",\n    content: singlePost.content\n  }), __jsx(\"meta\", {\n    property: \"og:image\",\n    content: singlePost.Images[0] ? singlePost.Images[0].src : 'https://nodebird.com/favicon.ico'\n  }), __jsx(\"meta\", {\n    property: \"og:url\",\n    content: `https://nodebird.com/post/${id}`\n  })), __jsx(PostCard, {\n    post: singlePost\n  }));\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  console.log('getServerSideProps start');\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = ''; //서버에서 쿠키가 공유가 되기때문에 로그인이 공유되는 문제가 발생하기때문에 이런식으로 쿠키를 지웠다가 채운다.\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_POSTS_REQUEST,\n    data: context.params.id\n  });\n  context.store.dispatch(END);\n  console.log('getServerSideProps end');\n  await context.store.sagaTask.toPromise();\n});\nexport default Post;","map":{"version":3,"sources":["C:/Users/Tony/Documents/GitHub/nordbird/front/pages/post/[id].js"],"names":["React","END","axios","useSelector","useRouter","AppLayout","PostCard","LOAD_POSTS_REQUEST","LOAD_MY_INFO_REQUEST","wrapper","Post","router","id","query","singlePost","state","post","User","nickname","content","Images","src","getServerSideProps","context","console","log","cookie","req","headers","defaults","Cookie","store","dispatch","type","data","params","sagaTask","toPromise"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,kBAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,SAASC,kBAAT,QAAmC,qBAAnC;AACA,SAASC,oBAAT,QAAqC,qBAArC;AACA,OAAOC,OAAP,MAAoB,4BAApB;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACf,QAAMC,MAAM,GAAGP,SAAS,EAAxB;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAASD,MAAM,CAACE,KAAtB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAiBX,WAAW,CAAEY,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAAlC;AAEA,SACI,MAAC,SAAD,QACI,MAAC,IAAD,QACI,qBACKF,UAAU,CAACG,IAAX,CAAgBC,QADrB,SADJ,EAKI;AAAM,IAAA,IAAI,EAAC,aAAX;AAAyB,IAAA,OAAO,EAAEJ,UAAU,CAACK;AAA7C,IALJ,EAMI;AAAM,IAAA,QAAQ,EAAC,UAAf;AAA0B,IAAA,OAAO,EAAG,GAAEL,UAAU,CAACG,IAAX,CAAgBC,QAAS;AAA/D,IANJ,EAOI;AAAM,IAAA,QAAQ,EAAC,gBAAf;AAAgC,IAAA,OAAO,EAAEJ,UAAU,CAACK;AAApD,IAPJ,EAQI;AAAM,IAAA,QAAQ,EAAC,UAAf;AAA0B,IAAA,OAAO,EAAEL,UAAU,CAACM,MAAX,CAAkB,CAAlB,IAAuBN,UAAU,CAACM,MAAX,CAAkB,CAAlB,EAAqBC,GAA5C,GAAkD;AAArF,IARJ,EASI;AAAM,IAAA,QAAQ,EAAC,QAAf;AAAwB,IAAA,OAAO,EAAG,6BAA4BT,EAAG;AAAjE,IATJ,CADJ,EAYI,MAAC,QAAD;AAAU,IAAA,IAAI,EAAEE;AAAhB,IAZJ,CADJ;AAgBH,CArBD;;AAuBA,OAAO,MAAMQ,kBAAkB,GAAGb,OAAO,CAACa,kBAAR,CAA2B,MAAOC,OAAP,IAAoB;AAC7EC,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACA,QAAMC,MAAM,GAAGH,OAAO,CAACI,GAAR,GAAcJ,OAAO,CAACI,GAAR,CAAYC,OAAZ,CAAoBF,MAAlC,GAA2C,EAA1D;AACAxB,EAAAA,KAAK,CAAC2B,QAAN,CAAeD,OAAf,CAAuBE,MAAvB,GAAgC,EAAhC,CAH6E,CAI7E;;AACA,MAAIP,OAAO,CAACI,GAAR,IAAeD,MAAnB,EAA2B;AACvBxB,IAAAA,KAAK,CAAC2B,QAAN,CAAeD,OAAf,CAAuBE,MAAvB,GAAgCJ,MAAhC;AACH;;AACDH,EAAAA,OAAO,CAACQ,KAAR,CAAcC,QAAd,CAAuB;AACnBC,IAAAA,IAAI,EAAEzB;AADa,GAAvB;AAGAe,EAAAA,OAAO,CAACQ,KAAR,CAAcC,QAAd,CAAuB;AACnBC,IAAAA,IAAI,EAAE1B,kBADa;AAEnB2B,IAAAA,IAAI,EAAEX,OAAO,CAACY,MAAR,CAAevB;AAFF,GAAvB;AAIAW,EAAAA,OAAO,CAACQ,KAAR,CAAcC,QAAd,CAAuB/B,GAAvB;AACAuB,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA,QAAMF,OAAO,CAACQ,KAAR,CAAcK,QAAd,CAAuBC,SAAvB,EAAN;AACH,CAlBiC,CAA3B;AAoBP,eAAe3B,IAAf","sourcesContent":["// post/[id].js\r\nimport React from 'react';\r\nimport { END } from '@redux-saga/core';\r\nimport axios from 'axios';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { useRouter } from 'next/router';\r\nimport AppLayout from '../../components/AppLayout';\r\nimport PostCard from '../../components/PostCard';\r\nimport { LOAD_POSTS_REQUEST } from '../../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST } from '../../reducers/user';\r\nimport wrapper from '../../store/configureStore';\r\n\r\nconst Post = () => {\r\n    const router = useRouter();\r\n    const { id } = router.query;\r\n    const { singlePost } = useSelector((state) => state.post);\r\n\r\n    return (\r\n        <AppLayout>\r\n            <Head>\r\n                <title>\r\n                    {singlePost.User.nickname}\r\n                    post\r\n                </title>\r\n                <meta name=\"description\" content={singlePost.content} />\r\n                <meta property=\"og:title\" content={`${singlePost.User.nickname}님의 게시글`} />\r\n                <meta property=\"og:description\" content={singlePost.content} />\r\n                <meta property=\"og:image\" content={singlePost.Images[0] ? singlePost.Images[0].src : 'https://nodebird.com/favicon.ico'} />\r\n                <meta property=\"og:url\" content={`https://nodebird.com/post/${id}`} />\r\n            </Head>\r\n            <PostCard post={singlePost} />\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context ) => {\r\n    console.log('getServerSideProps start');\r\n    const cookie = context.req ? context.req.headers.cookie : '';\r\n    axios.defaults.headers.Cookie = '';       \r\n    //서버에서 쿠키가 공유가 되기때문에 로그인이 공유되는 문제가 발생하기때문에 이런식으로 쿠키를 지웠다가 채운다.\r\n    if (context.req && cookie) {\r\n        axios.defaults.headers.Cookie = cookie;        \r\n    }\r\n    context.store.dispatch({\r\n        type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n    context.store.dispatch({\r\n        type: LOAD_POSTS_REQUEST,\r\n        data: context.params.id,\r\n    });\r\n    context.store.dispatch(END);\r\n    console.log('getServerSideProps end');\r\n    await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default Post;"]},"metadata":{},"sourceType":"module"}