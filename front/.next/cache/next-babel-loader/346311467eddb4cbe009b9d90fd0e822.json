{"ast":null,"code":"import { all, fork, put, delay, takeLatest } from \"@redux-saga/core/effects\"; // function loginAPI(data) {\n//     yield axios.post('/api/login', data)\n// }\n\nfunction* logIn(action) {\n  try {\n    yield delay(1000); // const result = yield call(loginAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\n\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n} // function logoutAPI() {\n//     yield axios.post('/api/logout')\n// }\n\n\nfunction* logOut() {\n  try {\n    yield delay(1000); // const result = yield call(logoutAPI);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\n\n    yield put({\n      type: 'LOG_OUT_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest('LOG_IN_REQUEST', logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest('LOG_OUT_REQUEST', logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["C:/Users/Tony/Documents/GitHub/nordbird/front/sagas/user.js"],"names":["all","fork","put","delay","takeLatest","logIn","action","type","data","result","err","response","logOut","watchLogin","watchLogOut","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,KAAzB,EAAgCC,UAAhC,QAAkD,0BAAlD,C,CAEA;AACA;AACA;;AAEA,UAAUC,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAI;AACA,UAAMH,KAAK,CAAC,IAAD,CAAX,CADA,CAEA;;AACA,UAAMD,GAAG,CAAC;AACNK,MAAAA,IAAI,EAAE,gBADA;AAENC,MAAAA,IAAI,EAAEC,MAAM,CAACD;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOE,GAAP,EAAY;AACV,UAAMR,GAAG,CAAC;AACNK,MAAAA,IAAI,EAAE,gBADA;AAENC,MAAAA,IAAI,EAAEE,GAAG,CAACC,QAAJ,CAAaH;AAFb,KAAD,CAAT;AAIH;AACJ,C,CAED;AACA;AACA;;;AAEA,UAAUI,MAAV,GAAmB;AACf,MAAI;AACA,UAAMT,KAAK,CAAC,IAAD,CAAX,CADA,CAEA;;AACA,UAAMD,GAAG,CAAC;AACNK,MAAAA,IAAI,EAAE,iBADA;AAENC,MAAAA,IAAI,EAAEC,MAAM,CAACD;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOE,GAAP,EAAY;AACV,UAAMR,GAAG,CAAC;AACNK,MAAAA,IAAI,EAAE,iBADA;AAENC,MAAAA,IAAI,EAAEE,GAAG,CAACC,QAAJ,CAAaH;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUK,UAAV,GAAuB;AACnB,QAAMT,UAAU,CAAC,gBAAD,EAAmBC,KAAnB,CAAhB;AACH;;AAED,UAAUS,WAAV,GAAwB;AACpB,QAAMV,UAAU,CAAC,iBAAD,EAAoBQ,MAApB,CAAhB;AACH;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAChC,QAAMf,GAAG,CAAC,CACNC,IAAI,CAACY,UAAD,CADE,EAENZ,IAAI,CAACa,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { all, fork, put, delay, takeLatest } from \"@redux-saga/core/effects\";\r\n\r\n// function loginAPI(data) {\r\n//     yield axios.post('/api/login', data)\r\n// }\r\n\r\nfunction* logIn(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result = yield call(loginAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n        yield put({\r\n            type: 'LOG_IN_SUCCESS',\r\n            data: result.data\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: 'LOG_IN_FAILURE',\r\n            data: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\n// function logoutAPI() {\r\n//     yield axios.post('/api/logout')\r\n// }\r\n\r\nfunction* logOut() {\r\n    try {\r\n        yield delay(1000);\r\n        // const result = yield call(logoutAPI);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n        yield put({\r\n            type: 'LOG_OUT_SUCCESS',\r\n            data: result.data\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: 'LOG_OUT_FAILURE',\r\n            data: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction* watchLogin() {\r\n    yield takeLatest('LOG_IN_REQUEST', logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n    yield takeLatest('LOG_OUT_REQUEST', logOut);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchLogOut)\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}