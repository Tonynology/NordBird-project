{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport shortId from 'shortid';\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: 'tonymoon'\n    },\n    content: 'first post #express',\n    Images: [{\n      id: shortId.generate(),\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?update=2018726'\n    }, {\n      id: shortId.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }, {\n      id: shortId.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'nero'\n      },\n      content: 'congratulation!'\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'moon'\n      },\n      content: 'haha nice'\n    }]\n  }],\n  imagePaths: [],\n  addPostAdded: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostAdded: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentAdded: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST'; //오타방지 차원에서 변수로 빼주는게 좋다. \n\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST'; //오타방지 차원에서 변수로 빼주는게 좋다. \n\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST'; //오타방지 차원에서 변수로 빼주는게 좋다. \n\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: 'Tony'\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: 'Tony'\n    }\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost(action.data)].concat(_toConsumableArray(state.mainPosts)),\n        addPostLoading: false,\n        addPostDone: true\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    case REMOVE_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostLoading: true,\n        removePostDone: false,\n        removePostError: null\n      });\n\n    case REMOVE_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: state.mainPosts.filter(function (v) {\n          return v.id === action.data;\n        }),\n        removePostLoading: false,\n        removePostDone: true\n      });\n\n    case REMOVE_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostLoading: false,\n        removePostError: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        var postIndex = state.mainPosts.findIndex(function (v) {\n          return v.id === action.data.postId;\n        });\n\n        var post = _objectSpread({}, state.mainPosts[postIndex]);\n\n        post.Comments = [dummyComment(action.data.content)].concat(_toConsumableArray(post.Comments));\n\n        var mainPosts = _toConsumableArray(state.mainPosts);\n\n        mainPosts[postIndex] = post;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts: mainPosts,\n          addCommentLoading: false,\n          addCommentDone: true\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Tony/Documents/GitHub/nordbird/front/reducers/post.js"],"names":["shortId","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostAdded","addPostDone","addPostError","removePostAdded","removePostDone","removePostError","addCommentAdded","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","addPostLoading","error","removePostLoading","filter","v","addCommentLoading","postIndex","findIndex","postId","post"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\n\r\nexport const initialState = {\r\n    mainPosts: [{\r\n        id: 1,\r\n        User: {\r\n            id: 1,\r\n            nickname: 'tonymoon',\r\n        },\r\n        content: 'first post #express',\r\n        Images: [{\r\n            id: shortId.generate(),\r\n            src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?update=2018726',\r\n        }, {\r\n            id: shortId.generate(),\r\n            src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\r\n        }, {\r\n            id: shortId.generate(),\r\n            src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\r\n        }],\r\n        Comments: [{\r\n            id: shortId.generate(),\r\n            User: {\r\n                id: shortId.generate(),\r\n                nickname: 'nero',\r\n            },\r\n            content: 'congratulation!',        \r\n        }, {\r\n            id: shortId.generate(),\r\n            User: {\r\n                id: shortId.generate(),\r\n                nickname: 'moon',\r\n            },\r\n            content: 'haha nice',\r\n        }]\r\n    }],\r\n    imagePaths: [],\r\n    addPostAdded: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    removePostAdded: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    addCommentAdded: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n}\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';    //오타방지 차원에서 변수로 빼주는게 좋다. \r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS'; \r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE'; \r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';    //오타방지 차원에서 변수로 빼주는게 좋다. \r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS'; \r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE'; \r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';    //오타방지 차원에서 변수로 빼주는게 좋다. \r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS'; \r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE'; \r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id: 1,\r\n        nickname: 'Tony',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: 'Tony',\r\n    },\r\n});\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST_REQUEST:\r\n            return {\r\n                ...state,\r\n                addPostLoading: true,\r\n                addPostDone: false,\r\n                addPostError: null,\r\n            }\r\n        case ADD_POST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n                addPostLoading: false,\r\n                addPostDone: true,\r\n            };\r\n\r\n        case ADD_POST_FAILURE:\r\n            return {\r\n                ...state,\r\n                addPostLoading: false,\r\n                addPostError: action.error,\r\n            }\r\n        case REMOVE_POST_REQUEST:\r\n            return {\r\n                ...state,\r\n                removePostLoading: true,\r\n                removePostDone: false,\r\n                removePostError: null,\r\n            }\r\n        case REMOVE_POST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                mainPosts: state.mainPosts.filter((v) => v.id === action.data),\r\n                removePostLoading: false,\r\n                removePostDone: true,\r\n            };\r\n\r\n        case REMOVE_POST_FAILURE:\r\n            return {\r\n                ...state,\r\n                removePostLoading: false,\r\n                removePostError: action.error,\r\n            }\r\n        case ADD_COMMENT_REQUEST:\r\n            return {\r\n                ...state,\r\n                addCommentLoading: true,\r\n                addCommentDone: false,\r\n                addCommentError: null,\r\n            }\r\n        case ADD_COMMENT_SUCCESS: {\r\n            const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n            const post = { ...state.mainPosts[postIndex] };\r\n            post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n            const mainPosts = [...state.mainPosts];\r\n            mainPosts[postIndex] = post;\r\n            return {\r\n                ...state,\r\n                mainPosts,\r\n                addCommentLoading: false,\r\n                addCommentDone: true,\r\n            };\r\n            \r\n        }\r\n        case ADD_COMMENT_FAILURE:\r\n            return {\r\n                ...state,\r\n                addCommentLoading: false,\r\n                addCommentError: action.error,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}