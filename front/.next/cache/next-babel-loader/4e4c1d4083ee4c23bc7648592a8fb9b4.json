{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Button, Popover, Avatar, List, Comment } from 'antd';\nimport { RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined, HeartTwoTone } from '@ant-design/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Link from 'next/link';\nimport moment from 'moment';\nimport PostImages from './PostImages';\nimport CommentForm from './CommentForm';\nimport PostCardContent from './PostCardContent';\nimport { LIKE_POST_REQUEST, REMOVE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\nimport FollowButton from './FollowButton'; // moment.locale('ko');\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      removePostLoading = _useSelector.removePostLoading,\n      retweetError = _useSelector.retweetError; // const [liked, setLiked] = useState(false);\n\n\n  var _useState = useState(false),\n      commetnFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector2.me;\n\n  var id = me === null || me === void 0 ? void 0 : me.id;\n  var onLike = useCallback(function () {\n    //false->true / true->false 로 왔다갔다 바꿔주는 코드\n    if (!id) {\n      return alert('login is necessary');\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  var onUnLike = useCallback(function () {\n    //false->true / true->false 로 왔다갔다 바꿔주는 코드\n    if (!id) {\n      return alert('login is necessary');\n    }\n\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  var onToggleComment = useCallback(function () {\n    if (!id) {\n      return alert('login is necessary');\n    }\n\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n  }, []);\n  var onRemovePost = useCallback(function () {\n    if (!id) {\n      return alert('login is necessary');\n    }\n\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  var onRetweet = useCallback(function () {\n    if (!id) {\n      return alert('login is necessary');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  var liked = post.Likers.find(function (v) {\n    return v.id === id;\n  }); // const id = me && me.id;\n\n  return __jsx(\"div\", {\n    style: {\n      marginBottom: 20\n    }\n  }, __jsx(Card, {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [//배열 안에 jsx를 넣을 땐 key값을 함께 넣어줘야함.\n    __jsx(RetweetOutlined, {\n      key: \"retweet\",\n      onClick: onRetweet\n    }), liked ? __jsx(HeartTwoTone, {\n      twoToneColor: \"#eb2f96\",\n      key: \"heart\",\n      onClick: onUnLike\n    }) : __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLike\n    }), __jsx(MessageOutlined, {\n      key: \"comment\",\n      onClick: onToggleComment\n    }), __jsx(Popover, {\n      key: \"more\",\n      content: __jsx(Button.Group, null, id && post.User.id == id ? __jsx(\"div\", null, __jsx(Button, null, \"Edit\"), __jsx(Button, {\n        type: \"danger\",\n        loading: removePostLoading,\n        onClick: onRemovePost\n      }, \"Delete\")) : __jsx(Button, null, \"Report\"))\n    }, __jsx(EllipsisOutlined, {\n      key: \"retweet\"\n    }))],\n    title: post.RetweetId ? \"\".concat(post.User.nickname, \" retweeted.\") : null,\n    extra: id && __jsx(FollowButton, {\n      post: post\n    })\n  }, post.RetweetId && post.Retweet ? __jsx(Card, {\n    cover: post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images\n    })\n  }, __jsx(\"div\", {\n    style: {\n      \"float\": 'right'\n    }\n  }, moment(post.createdAt).format('YYYY.MM.DD')), __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: \"/user/\".concat(post.Retweet.User.id)\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content\n    })\n  })) : __jsx(\"div\", null, __jsx(\"div\", {\n    style: {\n      \"float\": 'right'\n    }\n  }, moment(post.createdAt).format('YYYY.MM.DD')), __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: \"/user/\".concat(post.User.id)\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content\n    })\n  }))), commetnFormOpened && __jsx(\"div\", null, __jsx(CommentForm, {\n    post: post\n  }), __jsx(List, {\n    header: \"\".concat(post.Comments.length, \"\\uAC1C\\uC758 \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments,\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", null, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Link, {\n          href: \"/user/\".concat(item.User.id)\n        }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n        content: item.content\n      }));\n    }\n  })));\n};\n\nPostCard.prpTypes = {\n  //.object 대신 .shape은 object 안에 있는 모든걸 다 표기해줄려고 할때 사용.\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object),\n    Likers: PropTypes.arrayOf(PropTypes.object),\n    RetweetId: PropTypes.number,\n    Retweet: PropTypes.objectOf(PropTypes.any)\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/Tony/Documents/GitHub/nordbird/front/components/PostCard.js"],"names":["React","useState","useCallback","PropTypes","Card","Button","Popover","Avatar","List","Comment","RetweetOutlined","HeartOutlined","MessageOutlined","EllipsisOutlined","HeartTwoTone","useDispatch","useSelector","Link","moment","PostImages","CommentForm","PostCardContent","LIKE_POST_REQUEST","REMOVE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","FollowButton","PostCard","post","dispatch","state","removePostLoading","retweetError","commetnFormOpened","setCommentFormOpened","user","me","id","onLike","alert","type","data","onUnLike","onToggleComment","prev","onRemovePost","onRetweet","liked","Likers","find","v","marginBottom","Images","User","RetweetId","nickname","Retweet","createdAt","format","content","Comments","length","item","prpTypes","shape","number","object","string","arrayOf","objectOf","any","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Card, Button, Popover, Avatar, List, Comment } from 'antd';\r\nimport { RetweetOutlined, HeartOutlined, MessageOutlined,  EllipsisOutlined, HeartTwoTone } from '@ant-design/icons';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Link from 'next/link';\r\nimport moment from 'moment';\r\n\r\nimport PostImages from './PostImages';\r\nimport CommentForm from './CommentForm';\r\nimport PostCardContent from './PostCardContent';\r\nimport { LIKE_POST_REQUEST, REMOVE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\r\nimport FollowButton from './FollowButton';\r\n\r\n// moment.locale('ko');\r\n\r\nconst PostCard = ({ post }) => {\r\n    const dispatch = useDispatch();\r\n    const { removePostLoading, retweetError } = useSelector((state) => state.post);\r\n    // const [liked, setLiked] = useState(false);\r\n    const [commetnFormOpened, setCommentFormOpened] = useState(false);\r\n    \r\n    const { me } = useSelector((state) => state.user);\r\n    const id = me?.id;\r\n\r\n\r\n    const onLike = useCallback(() => {    //false->true / true->false 로 왔다갔다 바꿔주는 코드\r\n        if (!id) {\r\n            return alert('login is necessary');\r\n        }\r\n        return dispatch({\r\n            type: LIKE_POST_REQUEST,\r\n            data: post.id,\r\n        });\r\n    }, []);\r\n    const onUnLike = useCallback(() => {    //false->true / true->false 로 왔다갔다 바꿔주는 코드\r\n        if (!id) {\r\n            return alert('login is necessary');\r\n        }\r\n        return dispatch({\r\n            type: UNLIKE_POST_REQUEST,\r\n            data: post.id,\r\n        });\r\n    }, []);\r\n    const onToggleComment = useCallback(() => {\r\n        if (!id) {\r\n            return alert('login is necessary');\r\n        }\r\n        setCommentFormOpened((prev) => !prev);\r\n    }, []);\r\n\r\n    const onRemovePost = useCallback(() => {\r\n        if (!id) {\r\n            return alert('login is necessary');\r\n        }\r\n        return dispatch({\r\n            type: REMOVE_POST_REQUEST,\r\n            data: post.id,\r\n        });\r\n    }, []);\r\n\r\n    const onRetweet = useCallback(() => {\r\n        if (!id) {\r\n            return alert('login is necessary');\r\n        }\r\n        return dispatch({\r\n            type: RETWEET_REQUEST,\r\n            data: post.id,\r\n        })\r\n    }, [id]);\r\n\r\n    const liked = post.Likers.find((v) => v.id === id);\r\n    // const id = me && me.id;\r\n    return (\r\n        <div style={{ marginBottom: 20 }}>\r\n            <Card\r\n                cover={post.Images[0] && <PostImages images={post.Images} />}\r\n                actions={[      //배열 안에 jsx를 넣을 땐 key값을 함께 넣어줘야함.\r\n                    <RetweetOutlined key=\"retweet\" onClick={onRetweet} />,\r\n                    liked\r\n                        ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onUnLike}/>\r\n                        : <HeartOutlined key=\"heart\" onClick={onLike}/>,\r\n                    <MessageOutlined key=\"comment\" onClick={onToggleComment}/>,\r\n                    <Popover key=\"more\" content={(\r\n                        <Button.Group>\r\n                            {id && post.User.id == id \r\n                            ? (\r\n                                <div>\r\n                                    <Button>Edit</Button>\r\n                                    <Button type=\"danger\" loading={removePostLoading} onClick={onRemovePost}>Delete</Button>\r\n                                </div>\r\n                            ) \r\n                            : <Button>Report</Button>}                            \r\n                        </Button.Group>\r\n                    )}>\r\n                        <EllipsisOutlined key=\"retweet\"/>\r\n                    </Popover>\r\n                ]}\r\n                title={post.RetweetId ? `${post.User.nickname} retweeted.` : null}\r\n                extra={id && <FollowButton post={post} />}\r\n            >\r\n                {post.RetweetId && post.Retweet\r\n                ? (\r\n                    <Card\r\n                        cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}\r\n                    >\r\n                        <div style={{ float: 'right' }}>{moment(post.createdAt).format('YYYY.MM.DD')}</div>\r\n                        <Card.Meta\r\n                            avatar={(\r\n                            <Link href={`/user/${post.Retweet.User.id}`}>\r\n                                <a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a>\r\n                            </Link>\r\n                        )}\r\n                            title={post.Retweet.User.nickname}\r\n                            description={<PostCardContent postData={post.Retweet.content} />}\r\n                        />\r\n                    </Card>\r\n                )\r\n                : (    \r\n                    <div>     \r\n                        <div style={{ float: 'right' }}>{moment(post.createdAt).format('YYYY.MM.DD')}</div>\r\n                        <Card.Meta\r\n                            avatar={(\r\n                                <Link href={`/user/${post.User.id}`}>\r\n                                    <a><Avatar>{post.User.nickname[0]}</Avatar></a>\r\n                                </Link>\r\n                            )}\r\n                            title={post.User.nickname}\r\n                            description={<PostCardContent postData={post.content} />}\r\n                        />\r\n                    </div>   \r\n            )}\r\n                \r\n            </Card>\r\n            {commetnFormOpened && (\r\n                <div>\r\n                    <CommentForm post={post} />\r\n                    <List \r\n                        header={`${post.Comments.length}개의 댓글`}\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={post.Comments}\r\n                        renderItem={(item) => (\r\n                            <li>\r\n                                <Comment \r\n                                    author={item.User.nickname}\r\n                                    avatar={(\r\n                                        <Link href={`/user/${item.User.id}`}>\r\n                                            <a><Avatar>{item.User.nickname[0]}</Avatar></a>\r\n                                        </Link>\r\n                                    )}\r\n                                    content={item.content}\r\n                                />\r\n                            </li>\r\n                        )}\r\n                    />\r\n                </div>\r\n            )}\r\n            {/* <CommentForm />\r\n            <Comments /> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nPostCard.prpTypes = {   //.object 대신 .shape은 object 안에 있는 모든걸 다 표기해줄려고 할때 사용.\r\n    post: PropTypes.shape({\r\n        id: PropTypes.number,\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        createdAt: PropTypes.string,\r\n        Comments: PropTypes.arrayOf(PropTypes.object),\r\n        Images: PropTypes.arrayOf(PropTypes.object),\r\n        Likers: PropTypes.arrayOf(PropTypes.object),\r\n        RetweetId: PropTypes.number,\r\n        Retweet: PropTypes.objectOf(PropTypes.any),\r\n    }).isRequired,   \r\n};\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}