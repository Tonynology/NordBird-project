{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useMemo, useEffect } from 'react';\nimport { Form, Input, Button } from 'antd';\nimport Link from 'next/link';\nimport styled from 'styled-components'; // import PropTypes from 'prop-types';\n\nimport useInput from '../hooks/useInput';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LOG_IN_REQUEST } from '../reducers/user'; //Styled-component 방식. 이것 대신 useMemo 를 써도 됨. useMemo는 값을 저장하는 기능.\n\nconst ButtonWrapper = styled.div.withConfig({\n  displayName: \"LoginForm__ButtonWrapper\",\n  componentId: \"sc-11pccqq-0\"\n})([\"        margin-top:10px;\"]);\nconst FormWrapper = styled(Form).withConfig({\n  displayName: \"LoginForm__FormWrapper\",\n  componentId: \"sc-11pccqq-1\"\n})([\"padding:10px;\"]); // const LoginForm = ({ setIsLoggedIn }) => \n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n  const {\n    logInLoading,\n    logInError\n  } = useSelector(state => state.user);\n  const [email, onChangeEmail] = useInput('');\n  const [password, onChangePassword] = useInput('');\n  useEffect(() => {\n    if (logInError) {\n      alert(logInError);\n    }\n  }, [logInError]); // const [id, setId] = useState('');\n  // const [password, setPassword] = useState('');\n  // const onChangeId = useCallback((e) => {//이런것들 처럼 component에 props를 넘기는 함수는 useCallback을 써야 최적화가 된다.\n  //     setId(e.target.value);\n  // }, []);\n  // const onChangePassword = useCallback((e) => {\n  //     setPassword(e.target.value);\n  // }, []);\n  // const style = useMemo(() => ({ marginTop: 10}), []);\n\n  const onSubmitForm = useCallback(() => {\n    // setIsLoggedIn(true);\n    dispatch({\n      type: LOG_IN_REQUEST,\n      data: {\n        email,\n        password\n      }\n    });\n  }, [email, password]);\n  return __jsx(FormWrapper, {\n    onFinish: onSubmitForm\n  }, __jsx(\"div\", null, __jsx(\"label\", {\n    htmlFor: \"user-email\"\n  }, \"email\"), __jsx(\"br\", null), __jsx(Input, {\n    name: \"user-email\",\n    type: \"email\",\n    value: email,\n    onChange: onChangeEmail,\n    required: true\n  })), __jsx(\"div\", null, __jsx(\"label\", {\n    htmlFor: \"user-password\"\n  }, \"password\"), __jsx(\"br\", null), __jsx(Input, {\n    name: \"user-password\",\n    type: \"password\",\n    value: password,\n    onChange: onChangePassword,\n    required: true\n  })), __jsx(ButtonWrapper, null, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: logInLoading\n  }, \"Login\"), __jsx(Link, {\n    href: \"/signup\"\n  }, __jsx(\"a\", null, __jsx(Button, null, \"Signup\")))));\n}; // LoginForm.propTypes = {\n//     setIsLoggedIn: PropTypes.func.isRequired,\n// };\n\n\nexport default LoginForm;","map":{"version":3,"sources":["C:/Users/Tony/Documents/GitHub/nordbird/front/components/LoginForm.js"],"names":["React","useState","useCallback","useMemo","useEffect","Form","Input","Button","Link","styled","useInput","useDispatch","useSelector","LOG_IN_REQUEST","ButtonWrapper","div","FormWrapper","LoginForm","dispatch","logInLoading","logInError","state","user","email","onChangeEmail","password","onChangePassword","alert","onSubmitForm","type","data"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,OAAvC,EAAgDC,SAAhD,QAAiE,OAAjE;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,QAAoC,MAApC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,mBAAnB,C,CACA;;AAEA,OAAOC,QAAP,MAAqB,mBAArB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,cAAT,QAA+B,kBAA/B,C,CAEA;;AACA,MAAMC,aAAa,GAAGL,MAAM,CAACM,GAAV;AAAA;AAAA;AAAA,gCAAnB;AAIA,MAAMC,WAAW,GAAGP,MAAM,CAACJ,IAAD,CAAT;AAAA;AAAA;AAAA,qBAAjB,C,CAGA;;AACA,MAAMY,SAAS,GAAG,MAAM;AACpB,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAM;AAAEQ,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAA+BR,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAAhD;AACA,QAAM,CAACC,KAAD,EAAQC,aAAR,IAAyBd,QAAQ,CAAC,EAAD,CAAvC;AACA,QAAM,CAACe,QAAD,EAAWC,gBAAX,IAA+BhB,QAAQ,CAAC,EAAD,CAA7C;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIgB,UAAJ,EAAgB;AACZO,MAAAA,KAAK,CAACP,UAAD,CAAL;AACH;AACJ,GAJQ,EAIN,CAACA,UAAD,CAJM,CAAT,CANoB,CAYpB;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA,QAAMQ,YAAY,GAAG1B,WAAW,CAAC,MAAM;AACnC;AACAgB,IAAAA,QAAQ,CAAC;AACLW,MAAAA,IAAI,EAAEhB,cADD;AAELiB,MAAAA,IAAI,EAAE;AAAEP,QAAAA,KAAF;AAASE,QAAAA;AAAT;AAFD,KAAD,CAAR;AAIH,GAN+B,EAM7B,CAACF,KAAD,EAAQE,QAAR,CAN6B,CAAhC;AAQA,SACI,MAAC,WAAD;AAAa,IAAA,QAAQ,EAAEG;AAAvB,KACI,mBACI;AAAO,IAAA,OAAO,EAAC;AAAf,aADJ,EAEI,iBAFJ,EAGI,MAAC,KAAD;AAAO,IAAA,IAAI,EAAC,YAAZ;AAAyB,IAAA,IAAI,EAAC,OAA9B;AAAsC,IAAA,KAAK,EAAEL,KAA7C;AAAoD,IAAA,QAAQ,EAAEC,aAA9D;AAA6E,IAAA,QAAQ;AAArF,IAHJ,CADJ,EAMI,mBACI;AAAO,IAAA,OAAO,EAAC;AAAf,gBADJ,EAEI,iBAFJ,EAGI,MAAC,KAAD;AACI,IAAA,IAAI,EAAC,eADT;AAEI,IAAA,IAAI,EAAC,UAFT;AAGI,IAAA,KAAK,EAAEC,QAHX;AAII,IAAA,QAAQ,EAAEC,gBAJd;AAKI,IAAA,QAAQ;AALZ,IAHJ,CANJ,EAiBI,MAAC,aAAD,QACI,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,QAAQ,EAAC,QAAhC;AAAyC,IAAA,OAAO,EAAEP;AAAlD,aADJ,EAEI,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC;AAAX,KAAqB,iBAAG,MAAC,MAAD,iBAAH,CAArB,CAFJ,CAjBJ,CADJ;AAwBH,CAzDD,C,CA2DA;AACA;AACA;;;AAEA,eAAeF,SAAf","sourcesContent":["import React, { useState, useCallback, useMemo, useEffect } from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\nimport Link from 'next/link';\r\nimport styled from 'styled-components';\r\n// import PropTypes from 'prop-types';\r\n\r\nimport useInput from '../hooks/useInput';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { LOG_IN_REQUEST } from '../reducers/user';\r\n\r\n//Styled-component 방식. 이것 대신 useMemo 를 써도 됨. useMemo는 값을 저장하는 기능.\r\nconst ButtonWrapper = styled.div`       \r\n    margin-top: 10px;\r\n`;\r\n\r\nconst FormWrapper = styled(Form)`\r\n    padding: 10px;\r\n`;\r\n// const LoginForm = ({ setIsLoggedIn }) => \r\nconst LoginForm = () => {\r\n    const dispatch = useDispatch();\r\n    const { logInLoading, logInError } = useSelector((state) => state.user);\r\n    const [email, onChangeEmail] = useInput('');\r\n    const [password, onChangePassword] = useInput('');\r\n\r\n    useEffect(() => {\r\n        if (logInError) {\r\n            alert(logInError);\r\n        }\r\n    }, [logInError]);\r\n\r\n    // const [id, setId] = useState('');\r\n    // const [password, setPassword] = useState('');\r\n\r\n    // const onChangeId = useCallback((e) => {//이런것들 처럼 component에 props를 넘기는 함수는 useCallback을 써야 최적화가 된다.\r\n    //     setId(e.target.value);\r\n    // }, []);\r\n\r\n    // const onChangePassword = useCallback((e) => {\r\n    //     setPassword(e.target.value);\r\n    // }, []);\r\n\r\n    // const style = useMemo(() => ({ marginTop: 10}), []);\r\n\r\n    const onSubmitForm = useCallback(() => {\r\n        // setIsLoggedIn(true);\r\n        dispatch({\r\n            type: LOG_IN_REQUEST,\r\n            data: { email, password },\r\n          });\r\n    }, [email, password]);\r\n\r\n    return (\r\n        <FormWrapper onFinish={onSubmitForm}>\r\n            <div>\r\n                <label htmlFor=\"user-email\">email</label>\r\n                <br/>\r\n                <Input name=\"user-email\" type=\"email\" value={email} onChange={onChangeEmail} required />\r\n            </div>\r\n            <div>\r\n                <label htmlFor=\"user-password\">password</label>\r\n                <br/>\r\n                <Input \r\n                    name=\"user-password\" \r\n                    type=\"password\" \r\n                    value={password} \r\n                    onChange={onChangePassword} \r\n                    required \r\n                />\r\n            </div>\r\n            <ButtonWrapper>\r\n                <Button type=\"primary\" htmlType=\"submit\" loading={logInLoading}>Login</Button>\r\n                <Link href=\"/signup\"><a><Button>Signup</Button></a></Link>\r\n            </ButtonWrapper>\r\n        </FormWrapper>\r\n    );\r\n}\r\n\r\n// LoginForm.propTypes = {\r\n//     setIsLoggedIn: PropTypes.func.isRequired,\r\n// };\r\n\r\nexport default LoginForm;"]},"metadata":{},"sourceType":"module"}