{"ast":null,"code":"import { all, fork, put, delay, takeLatest } from \"@redux-saga/core/effects\";\nimport axios from 'axios';\nimport { // FOLLOW_FAILURE,\n// FOLLOW_REQUEST,\n// FOLLOW_SUCCESS,\nLOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS // UNFOLLOW_FAILURE,\n// UNFOLLOW_REQUEST,\n// UNFOLLOW_SUCCESS,\n} from '../reducers/user';\n\nfunction loginAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    yield delay(1000); // const result = yield call(loginAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logoutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    yield delay(1000); // const result = yield call(logoutAPI);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\n\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* signUp() {\n  try {\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/Tony/Documents/GitHub/nordbird/front/sagas/user.js"],"names":["all","fork","put","delay","takeLatest","axios","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","loginAPI","data","post","logIn","action","type","result","err","error","response","logoutAPI","logOut","signUpAPI","signUp","watchLogin","watchLogOut","watchSignUp","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,KAAzB,EAAgCC,UAAhC,QAAkD,0BAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACI;AACA;AACA;AACAC,cAJJ,EAKIC,cALJ,EAMIC,cANJ,EAOIC,eAPJ,EAQIC,eARJ,EASIC,eATJ,EAUIC,eAVJ,EAWIC,eAXJ,EAYIC,eAZJ,CAaI;AACA;AACA;AAfJ,OAgBS,kBAhBT;;AAkBA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOX,KAAK,CAACY,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAI;AACA,UAAMhB,KAAK,CAAC,IAAD,CAAX,CADA,CAEA;;AACA,UAAMD,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAAEZ,cADA;AAENQ,MAAAA,IAAI,EAAEK,MAAM,CAACL;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOM,GAAP,EAAY;AACV,UAAMpB,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAAEd,cADA;AAENiB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaR;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASS,SAAT,GAAqB;AACjB,SAAOpB,KAAK,CAACY,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUS,MAAV,GAAmB;AACf,MAAI;AACA,UAAMvB,KAAK,CAAC,IAAD,CAAX,CADA,CAEA;;AACA,UAAMD,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAAET;AADA,KAAD,CAAT;AAGH,GAND,CAME,OAAOW,GAAP,EAAY;AACV,UAAMpB,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAAEX,eADA;AAENc,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaR;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASW,SAAT,GAAqB;AACjB,SAAOtB,KAAK,CAACY,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUW,MAAV,GAAmB;AACf,MAAI;AACA,UAAMzB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAAEN;AADA,KAAD,CAAT;AAGH,GALD,CAKE,OAAOQ,GAAP,EAAY;AACV,UAAMpB,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAAER,eADA;AAENW,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaR;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUa,UAAV,GAAuB;AACnB,QAAMzB,UAAU,CAACG,cAAD,EAAiBW,KAAjB,CAAhB;AACH;;AAED,UAAUY,WAAV,GAAwB;AACpB,QAAM1B,UAAU,CAACM,eAAD,EAAkBgB,MAAlB,CAAhB;AACH;;AAED,UAAUK,WAAV,GAAwB;AACpB,QAAM3B,UAAU,CAACS,eAAD,EAAkBe,MAAlB,CAAhB;AACH;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAChC,QAAMhC,GAAG,CAAC,CACNC,IAAI,CAAC4B,UAAD,CADE,EAEN5B,IAAI,CAAC6B,WAAD,CAFE,EAGN7B,IAAI,CAAC8B,WAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import { all, fork, put, delay, takeLatest } from \"@redux-saga/core/effects\";\r\nimport axios from 'axios';\r\nimport {\r\n    // FOLLOW_FAILURE,\r\n    // FOLLOW_REQUEST,\r\n    // FOLLOW_SUCCESS,\r\n    LOG_IN_FAILURE,\r\n    LOG_IN_REQUEST,\r\n    LOG_IN_SUCCESS,\r\n    LOG_OUT_FAILURE,\r\n    LOG_OUT_REQUEST,\r\n    LOG_OUT_SUCCESS,\r\n    SIGN_UP_FAILURE,\r\n    SIGN_UP_REQUEST,\r\n    SIGN_UP_SUCCESS,\r\n    // UNFOLLOW_FAILURE,\r\n    // UNFOLLOW_REQUEST,\r\n    // UNFOLLOW_SUCCESS,\r\n  } from '../reducers/user';\r\n\r\nfunction loginAPI(data) {\r\n    return axios.post('/api/login', data)\r\n}\r\n\r\nfunction* logIn(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result = yield call(loginAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            error: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction logoutAPI() {\r\n    return axios.post('/api/logout')\r\n}\r\n\r\nfunction* logOut() {\r\n    try {\r\n        yield delay(1000);\r\n        // const result = yield call(logoutAPI);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction signUpAPI() {\r\n    return axios.post('/api/logout')\r\n}\r\n\r\nfunction* signUp() {\r\n    try {\r\n        yield delay(1000);        \r\n        yield put({\r\n            type: SIGN_UP_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction* watchLogin() {\r\n    yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp)\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}