{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Tony\\\\Documents\\\\GitHub\\\\nordbird\\\\front\\\\components\\\\PostCard.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Button, Popover, Avatar, List, Comment } from 'antd';\nimport { RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined, HeartTwoTone } from '@ant-design/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PostImages from './PostImages';\nimport CommentForm from './CommentForm';\nimport PostCardContent from './PostCardContent';\nimport { REMOVE_POST_REQUEST } from '../reducers/post';\nimport FollowButton from './FollowButton';\n\nvar PostCard = function PostCard(_ref) {\n  _s();\n\n  var post = _ref.post;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      removePostLoading = _useSelector.removePostLoading; // const [liked, setLiked] = useState(false);\n\n\n  var _useState = useState(false),\n      commetnFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var onLike = useCallback(function () {\n    //false->true / true->false 로 왔다갔다 바꿔주는 코드\n    dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  var onUnLike = useCallback(function () {\n    //false->true / true->false 로 왔다갔다 바꿔주는 코드\n    dispatch({\n      type: UNLIST_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n  }, []);\n  var onRemovePost = useCallback(function () {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector2.me;\n\n  var id = me === null || me === void 0 ? void 0 : me.id;\n  var liked = post.Likers.find(function (v) {\n    return v.id === id;\n  }); // const id = me && me.id;\n\n  return __jsx(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, __jsx(Card, {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 42\n      }\n    }),\n    actions: [//배열 안에 jsx를 넣을 땐 key값을 함께 넣어줘야함.\n    __jsx(RetweetOutlined, {\n      key: \"retweet\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }\n    }), liked ? __jsx(HeartTwoTone, {\n      twoToneColor: \"#eb2f96\",\n      key: \"heart\",\n      onClick: onUnLike,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 27\n      }\n    }) : __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLike,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 27\n      }\n    }), __jsx(MessageOutlined, {\n      key: \"comment\",\n      onClick: onToggleComment,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }\n    }), __jsx(Popover, {\n      key: \"more\",\n      content: __jsx(Button.Group, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }\n      }, id && post.User.id == id ? __jsx(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 33\n        }\n      }, __jsx(Button, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 37\n        }\n      }, \"Edit\"), __jsx(Button, {\n        type: \"danger\",\n        loading: removePostLoading,\n        onClick: onRemovePost,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 37\n        }\n      }, \"Delete\")) : __jsx(Button, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 31\n        }\n      }, \"Report\")),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }\n    }, __jsx(EllipsisOutlined, {\n      key: \"retweet\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 25\n      }\n    }))],\n    extra: id && __jsx(FollowButton, {\n      post: post,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 30\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 29\n      }\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 34\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  })), commetnFormOpened && __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, __jsx(CommentForm, {\n    post: post,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }\n  }), __jsx(List, {\n    header: \"\".concat(post.Comments.length, \"\\uAC1C\\uC758 \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments,\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 29\n        }\n      }, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Avatar, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 45\n          }\n        }, item.User.nickname[0]),\n        content: item.content,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 33\n        }\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 21\n    }\n  })));\n};\n\n_s(PostCard, \"9G0YdGoCPQ/kcR24y2mDBykFV9w=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = PostCard;\nPostCard.prpTypes = {\n  //.object 대신 .shape은 object 안에 있는 모든걸 다 표기해줄려고 할때 사용.\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object),\n    Likers: PropTypes.arrayOf(PropTypes.object)\n  }).isRequired\n};\nexport default PostCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostCard\");","map":{"version":3,"sources":["C:/Users/Tony/Documents/GitHub/nordbird/front/components/PostCard.js"],"names":["React","useState","useCallback","PropTypes","Card","Button","Popover","Avatar","List","Comment","RetweetOutlined","HeartOutlined","MessageOutlined","EllipsisOutlined","HeartTwoTone","useDispatch","useSelector","PostImages","CommentForm","PostCardContent","REMOVE_POST_REQUEST","FollowButton","PostCard","post","dispatch","state","removePostLoading","commetnFormOpened","setCommentFormOpened","onLike","type","LIKE_POST_REQUEST","data","id","onUnLike","UNLIST_POST_REQUEST","onToggleComment","prev","onRemovePost","user","me","liked","Likers","find","v","marginBottom","Images","User","nickname","content","Comments","length","item","prpTypes","shape","number","object","string","createdAt","arrayOf","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Card, Button, Popover, Avatar, List, Comment } from 'antd';\r\nimport { RetweetOutlined, HeartOutlined, MessageOutlined,  EllipsisOutlined, HeartTwoTone } from '@ant-design/icons';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport PostImages from './PostImages';\r\nimport CommentForm from './CommentForm';\r\nimport PostCardContent from './PostCardContent';\r\nimport { REMOVE_POST_REQUEST } from '../reducers/post';\r\nimport FollowButton from './FollowButton';\r\n\r\nconst PostCard = ({ post }) => {\r\n    const dispatch = useDispatch();\r\n    const { removePostLoading } = useSelector((state) => state.post);\r\n    // const [liked, setLiked] = useState(false);\r\n    const [commetnFormOpened, setCommentFormOpened] = useState(false);\r\n\r\n    const onLike = useCallback(() => {    //false->true / true->false 로 왔다갔다 바꿔주는 코드\r\n        dispatch({\r\n            type: LIKE_POST_REQUEST,\r\n            data: post.id,\r\n        });\r\n    }, []);\r\n    const onUnLike = useCallback(() => {    //false->true / true->false 로 왔다갔다 바꿔주는 코드\r\n        dispatch({\r\n            type: UNLIST_POST_REQUEST,\r\n            data: post.id,\r\n        });\r\n    }, []);\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened((prev) => !prev);\r\n    }, []);\r\n\r\n    const onRemovePost = useCallback(() => {\r\n        dispatch({\r\n            type: REMOVE_POST_REQUEST,\r\n            data: post.id,\r\n        });\r\n    }, []);\r\n\r\n    const { me } = useSelector((state) => state.user);\r\n    const id = me?.id;\r\n    const liked = post.Likers.find((v) => v.id === id);\r\n    // const id = me && me.id;\r\n    return (\r\n        <div style={{ marginBottom: 20 }}>\r\n            <Card\r\n                cover={post.Images[0] && <PostImages images={post.Images} />}\r\n                actions={[      //배열 안에 jsx를 넣을 땐 key값을 함께 넣어줘야함.\r\n                    <RetweetOutlined key=\"retweet\"/>,\r\n                    liked\r\n                        ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onUnLike}/>\r\n                        : <HeartOutlined key=\"heart\" onClick={onLike}/>,\r\n                    <MessageOutlined key=\"comment\" onClick={onToggleComment}/>,\r\n                    <Popover key=\"more\" content={(\r\n                        <Button.Group>\r\n                            {id && post.User.id == id \r\n                            ? (\r\n                                <div>\r\n                                    <Button>Edit</Button>\r\n                                    <Button type=\"danger\" loading={removePostLoading} onClick={onRemovePost}>Delete</Button>\r\n                                </div>\r\n                            ) \r\n                            : <Button>Report</Button>}                            \r\n                        </Button.Group>\r\n                    )}>\r\n                        <EllipsisOutlined key=\"retweet\"/>\r\n                    </Popover>\r\n                ]}\r\n                extra={id && <FollowButton post={post} />}\r\n            >\r\n                <Card.Meta\r\n                    avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n                    title={post.User.nickname}\r\n                    description={<PostCardContent postData={post.content} />}\r\n                />\r\n            </Card>\r\n            {commetnFormOpened && (\r\n                <div>\r\n                    <CommentForm post={post} />\r\n                    <List \r\n                        header={`${post.Comments.length}개의 댓글`}\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={post.Comments}\r\n                        renderItem={(item) => (\r\n                            <li>\r\n                                <Comment \r\n                                    author={item.User.nickname}\r\n                                    avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                                    content={item.content}\r\n                                />\r\n                            </li>\r\n                        )}\r\n                    />\r\n                </div>\r\n            )}\r\n            {/* <CommentForm />\r\n            <Comments /> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nPostCard.prpTypes = {   //.object 대신 .shape은 object 안에 있는 모든걸 다 표기해줄려고 할때 사용.\r\n    post: PropTypes.shape({\r\n        id: PropTypes.number,\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        createdAt: PropTypes.string,\r\n        Comments: PropTypes.arrayOf(PropTypes.object),\r\n        Images: PropTypes.arrayOf(PropTypes.object),\r\n        Likers: PropTypes.arrayOf(PropTypes.object),\r\n    }).isRequired,   \r\n};\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}