{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, takeLatest, delay, fork, put } from \"@redux-saga/core/effects\";\nimport shortId from 'shortid';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_TO_ME // generateDummyPost,\n// LOAD_POSTS_FAILURE,\n// LOAD_POSTS_REQUEST,\n// LOAD_POSTS_SUCCESS,\n, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_OF_ME } from '../reducers/post';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          // const result = yield call(addPostAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\n          id = shortId.generate();\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction removePost(action) {\n  return _regeneratorRuntime.wrap(function removePost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            //post reducer 조작 부분\n            type: REMOVE_POST_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context2.next = 7;\n          return put({\n            //user reducer 조작 부분\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 7:\n          _context2.next = 13;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 13;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            data: _context2.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 9]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/post/\".concat(data.postId, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context3.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["C:/Users/Tony/Documents/GitHub/nordbird/front/sagas/post.js"],"names":["addPost","removePost","addComment","watchAddPost","watchRemovePost","watchAddComment","postSaga","all","takeLatest","delay","fork","put","shortId","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_OF_ME","addPostAPI","data","axios","post","action","id","generate","type","content","response","removePostAPI","addCommentAPI","postId"],"mappings":"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","sourcesContent":["import { all, takeLatest, delay, fork, put } from \"@redux-saga/core/effects\";\r\nimport shortId from 'shortid';\r\nimport {\r\n    ADD_COMMENT_FAILURE,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    ADD_POST_TO_ME,\r\n    // generateDummyPost,\r\n    // LOAD_POSTS_FAILURE,\r\n    // LOAD_POSTS_REQUEST,\r\n    // LOAD_POSTS_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n    REMOVE_POST_OF_ME,\r\n  } from '../reducers/post';\r\n\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/post', data)\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result = yield call(addPostAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                content: action.data,\r\n            },\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.post('/api/post', data)\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result = yield call(addPostAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n\r\n        yield put({         //post reducer 조작 부분\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data,\r\n        });\r\n        yield put({         //user reducer 조작 부분\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/api/post/${data.postId}/comment`, data)\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result = yield call(addPostAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}