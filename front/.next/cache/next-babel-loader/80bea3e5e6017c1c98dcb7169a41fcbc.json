{"ast":null,"code":"var __jsx = React.createElement;\n// because of next.js, don't need to import.\n// but the folder should be 'pages' because next recognize 'pages' folder and change the files into each page\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport AppLayout from \"../components/AppLayout\";\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\n\nvar Home = function Home() {\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me; //구조분해.\n\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts,\n      hasMorePost = _useSelector2.hasMorePost,\n      loadPostsLoading = _useSelector2.loadPostsLoading,\n      retweetError = _useSelector2.retweetError;\n\n  useEffect(function () {\n    if (retweetError) {\n      alert(retweetError);\n    }\n  }, [retweetError]);\n  useEffect(function () {\n    function onScroll() {\n      console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\n\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePost && !loadPostsLoading) {\n          var _mainPosts;\n\n          var lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            lastId: lastId\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll); //useEffect에서 window eventlister를 사용하면 remove를 해줘야한다. 안그러면 메모리에 쌓임.\n    };\n  }, [hasMorePost, loadPostsLoading, mainPosts]);\n  return __jsx(AppLayout, null, me && __jsx(PostForm, null), mainPosts.map(function (post) {\n    return __jsx(PostCard, {\n      key: post.id,\n      post: post\n    });\n  }));\n};\n\nexport var __N_SSP = true;\nexport default Home;","map":{"version":3,"sources":["C:/Users/Tony/Documents/GitHub/nordbird/front/pages/index.js"],"names":["React","useEffect","useDispatch","useSelector","AppLayout","PostForm","PostCard","LOAD_POSTS_REQUEST","Home","dispatch","state","user","me","post","mainPosts","hasMorePost","loadPostsLoading","retweetError","alert","onScroll","console","log","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","type","addEventListener","removeEventListener","map"],"mappings":";AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAGA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,kBAAT,QAAmC,kBAAnC;;AAIA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACf,MAAMC,QAAQ,GAAGP,WAAW,EAA5B;;AADe,qBAEAC,WAAW,CAAC,UAACO,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CAFX;AAAA,MAEPC,EAFO,gBAEPA,EAFO,EAEyC;;;AAFzC,sBAGoDT,WAAW,CAAC,UAACO,KAAD;AAAA,WAAWA,KAAK,CAACG,IAAjB;AAAA,GAAD,CAH/D;AAAA,MAGPC,SAHO,iBAGPA,SAHO;AAAA,MAGIC,WAHJ,iBAGIA,WAHJ;AAAA,MAGiBC,gBAHjB,iBAGiBA,gBAHjB;AAAA,MAGmCC,YAHnC,iBAGmCA,YAHnC;;AAKfhB,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIgB,YAAJ,EAAkB;AACdC,MAAAA,KAAK,CAACD,YAAD,CAAL;AACH;AACJ,GAJQ,EAIN,CAACA,YAAD,CAJM,CAAT;AAOAhB,EAAAA,SAAS,CAAC,YAAM;AACZ,aAASkB,QAAT,GAAoB;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,OAAnB,EAA4BC,QAAQ,CAACC,eAAT,CAAyBC,YAArD,EAAmEF,QAAQ,CAACC,eAAT,CAAyBE,YAA5F;;AACA,UAAIL,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,GAAyDF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAwC,GAArG,EAA0G;AACtG,YAAIZ,WAAW,IAAI,CAACC,gBAApB,EAAsC;AAAA;;AAClC,cAAMY,MAAM,iBAAGd,SAAS,CAACA,SAAS,CAACe,MAAV,GAAmB,CAApB,CAAZ,+CAAG,WAAiCC,EAAhD;AACArB,UAAAA,QAAQ,CAAC;AACLsB,YAAAA,IAAI,EAAExB,kBADD;AAELqB,YAAAA,MAAM,EAANA;AAFK,WAAD,CAAR;AAIH;AACJ;AACJ;;AACDN,IAAAA,MAAM,CAACU,gBAAP,CAAwB,QAAxB,EAAkCb,QAAlC;AACA,WAAO,YAAM;AACTG,MAAAA,MAAM,CAACW,mBAAP,CAA2B,QAA3B,EAAqCd,QAArC,EADS,CACuC;AACnD,KAFD;AAGH,GAjBQ,EAiBN,CAACJ,WAAD,EAAcC,gBAAd,EAAgCF,SAAhC,CAjBM,CAAT;AAoBA,SACI,MAAC,SAAD,QACKF,EAAE,IAAI,MAAC,QAAD,OADX,EAEKE,SAAS,CAACoB,GAAV,CAAc,UAACrB,IAAD;AAAA,WAAU,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,IAAI,CAACiB,EAApB;AAAwB,MAAA,IAAI,EAAEjB;AAA9B,MAAV;AAAA,GAAd,CAFL,CADJ;AAMH,CAtCD;;;AAyDA,eAAeL,IAAf","sourcesContent":["// because of next.js, don't need to import.\r\n// but the folder should be 'pages' because next recognize 'pages' folder and change the files into each page\r\n\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { END } from 'redux-saga';\r\nimport axios from 'axios';\r\nimport AppLayout from \"../components/AppLayout\";\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\r\nimport wrapper from '../store/configureStore';\r\n\r\nconst Home = () => {\r\n    const dispatch = useDispatch();    \r\n    const { me } = useSelector((state) => state.user);      //구조분해.\r\n    const { mainPosts, hasMorePost, loadPostsLoading, retweetError } = useSelector((state) => state.post);\r\n\r\n    useEffect(() => {\r\n        if (retweetError) {\r\n            alert(retweetError);\r\n        }\r\n    }, [retweetError]);\r\n\r\n\r\n    useEffect(() => {\r\n        function onScroll() {\r\n            console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\r\n            if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n                if (hasMorePost && !loadPostsLoading) {\r\n                    const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n                    dispatch({\r\n                        type: LOAD_POSTS_REQUEST,\r\n                        lastId,\r\n                    });\r\n                }                \r\n            }\r\n        }\r\n        window.addEventListener('scroll', onScroll);\r\n        return () => {\r\n            window.removeEventListener('scroll', onScroll); //useEffect에서 window eventlister를 사용하면 remove를 해줘야한다. 안그러면 메모리에 쌓임.\r\n        };\r\n    }, [hasMorePost, loadPostsLoading, mainPosts]);\r\n\r\n\r\n    return (\r\n        <AppLayout>\r\n            {me && <PostForm />}\r\n            {mainPosts.map((post) => <PostCard key={post.id} post={post} />)}\r\n        </AppLayout>\r\n    );\r\n}\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context ) => {\r\n    const cookie = context.req ? context.req.headers.cookie : '';\r\n    axios.defaults.headers.Cookie = '';       \r\n    //서버에서 쿠키가 공유가 되기때문에 로그인이 공유되는 문제가 발생하기때문에 이런식으로 쿠키를 지웠다가 채운다.\r\n    if (context.req && cookie) {\r\n        axios.defaults.headers.Cookie = cookie;        \r\n    }\r\n    context.store.dispatch({\r\n        type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n    context.store.dispatch({\r\n        type: LOAD_POSTS_REQUEST,\r\n    });\r\n    context.store.dispatch(END);\r\n    await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}