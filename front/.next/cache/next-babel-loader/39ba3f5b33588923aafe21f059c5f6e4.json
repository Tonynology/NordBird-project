{"ast":null,"code":"import { all, fork, put, delay, takeLatest } from \"@redux-saga/core/effects\";\nimport axios from 'axios';\nimport { FOLLOW_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_SUCCESS, LOAD_MY_INFO_FAILURE } from '../reducers/user';\n\nfunction loadUserAPI(data) {\n  return axios.get('/user');\n}\n\nfunction* loadUser(action) {\n  try {\n    const result = yield call(loadUserAPI, action.data); //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\n\n    yield put({\n      type: LOAD_MY_INFO_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_MY_INFO_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction followAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* follow(action) {\n  try {\n    yield delay(1000); // const result = yield call(loginAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\n\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unfollowAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* unfollow(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loginAPI(data) {\n  return axios.post('/user/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(loginAPI, action.data); //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logoutAPI() {\n  return axios.post('/logout');\n}\n\nfunction* logOut() {\n  try {\n    // yield delay(1000);\n    // const result = yield call(logoutAPI);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\n    yield call(logoutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  return axios.post('/user', data);\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    console.log(result);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadUser);\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLoadUser), fork(watchFollow), fork(watchUnfollow), fork(watchLogin), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/Tony/Documents/GitHub/nordbird/front/sagas/user.js"],"names":["all","fork","put","delay","takeLatest","axios","FOLLOW_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","UNFOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","LOAD_MY_INFO_REQUEST","LOAD_MY_INFO_SUCCESS","LOAD_MY_INFO_FAILURE","loadUserAPI","data","get","loadUser","action","result","call","type","err","error","response","followAPI","post","follow","unfollowAPI","unfollow","loginAPI","logIn","logoutAPI","logOut","signUpAPI","signUp","console","log","watchLoadUser","watchFollow","watchUnfollow","watchLogin","watchLogOut","watchSignUp","userSaga"],"mappings":"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","sourcesContent":["import { all, fork, put, delay, takeLatest } from \"@redux-saga/core/effects\";\r\nimport axios from 'axios';\r\nimport {\r\n    FOLLOW_FAILURE,\r\n    FOLLOW_REQUEST,\r\n    FOLLOW_SUCCESS,\r\n    UNFOLLOW_FAILURE,\r\n    UNFOLLOW_REQUEST,\r\n    UNFOLLOW_SUCCESS,\r\n    LOG_IN_FAILURE,\r\n    LOG_IN_REQUEST,\r\n    LOG_IN_SUCCESS,\r\n    LOG_OUT_FAILURE,\r\n    LOG_OUT_REQUEST,\r\n    LOG_OUT_SUCCESS,\r\n    SIGN_UP_FAILURE,\r\n    SIGN_UP_REQUEST,\r\n    SIGN_UP_SUCCESS,  \r\n    LOAD_MY_INFO_REQUEST,\r\n    LOAD_MY_INFO_SUCCESS,\r\n    LOAD_MY_INFO_FAILURE,\r\n  } from '../reducers/user';\r\n\r\n\r\nfunction loadUserAPI(data) {\r\n    return axios.get('/user')\r\n}\r\n\r\nfunction* loadUser(action) {\r\n    try {\r\n        \r\n        const result = yield call(loadUserAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n        yield put({\r\n            type: LOAD_MY_INFO_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOAD_MY_INFO_FAILURE,\r\n            error: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction followAPI(data) {\r\n    return axios.post('/api/login', data)\r\n}\r\n\r\nfunction* follow(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result = yield call(loginAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n        yield put({\r\n            type: FOLLOW_SUCCESS,\r\n            data: action.data\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: FOLLOW_FAILURE,\r\n            error: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction unfollowAPI(data) {\r\n    return axios.post('/api/login', data)\r\n}\r\n\r\nfunction* unfollow(action) {\r\n    try {\r\n        yield delay(1000);\r\n        yield put({\r\n            type: UNFOLLOW_SUCCESS,\r\n            data: action.data\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: UNFOLLOW_FAILURE,\r\n            error: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction loginAPI(data) {\r\n    return axios.post('/user/login', data)\r\n}\r\n\r\nfunction* logIn(action) {\r\n    try {\r\n        \r\n        const result = yield call(loginAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            error: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction logoutAPI() {\r\n    return axios.post('/logout')\r\n}\r\n\r\nfunction* logOut() {\r\n    try {\r\n        // yield delay(1000);\r\n        // const result = yield call(logoutAPI);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n        yield call(logoutAPI);\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction signUpAPI(data) {\r\n    return axios.post('/user', data);\r\n}\r\n\r\nfunction* signUp(action) {\r\n    try {\r\n        const result = yield call(signUpAPI, action.data);\r\n        console.log(result);\r\n        yield put({\r\n            type: SIGN_UP_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: err.response.data\r\n        })\r\n    }    \r\n}\r\nfunction* watchLoadUser() {\r\n    yield takeLatest(LOAD_MY_INFO_REQUEST, loadUser);\r\n}\r\n\r\nfunction* watchFollow() {\r\n    yield takeLatest(FOLLOW_REQUEST, follow);\r\n}\r\n\r\nfunction* watchUnfollow() {\r\n    yield takeLatest(UNFOLLOW_REQUEST, unfollow);\r\n}\r\n\r\nfunction* watchLogin() {\r\n    yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLoadUser),\r\n        fork(watchFollow),\r\n        fork(watchUnfollow),\r\n        fork(watchLogin),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp)\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}