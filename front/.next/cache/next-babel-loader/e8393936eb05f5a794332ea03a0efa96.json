{"ast":null,"code":"import axios from 'axios';\nimport { all, takeLatest, delay, fork, put, throttle, call } from \"@redux-saga/core/effects\";\nimport shortId from 'shortid';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, generateDummyPost, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(retweetAPI, action.data); //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\n    // const id = shortId.generate();\n\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(uploadImagesAPI, action.data); //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\n    // const id = shortId.generate();\n\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data); //formdata는 바로 data로 보내줘야함. 객체로 하면 안됨\n}\n\nfunction* addPost(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(addPostAPI, action.data); //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\n    // const id = shortId.generate();\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI() {\n  return axios.patch('/post/${data}/like');\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI() {\n  return axios.delete('/post/${data}/like');\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadHashtagPostsAPI(data, lastId) {\n  return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadUserPostsAPI(data, lastId) {\n  return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.get(`/post/${data}`);\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data); //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\n\n    yield put({\n      //post reducer 조작 부분\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      //user reducer 조작 부분\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); //POST /post/1/comment   1=postId\n}\n\nfunction* addComment(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(addCommentAPI, action.data); //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction* watchLoadUserPosts() {\n  yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchLoadPost() {\n  yield throttle(5000, LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchRetweet), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadUserPosts), fork(watchLoadHashtagPosts), fork(watchLoadPosts), fork(watchLoadPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/Tony/Documents/GitHub/nordbird/front/sagas/post.js"],"names":["axios","all","takeLatest","delay","fork","put","throttle","call","shortId","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","generateDummyPost","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","retweetAPI","data","post","retweet","action","result","type","err","console","error","response","uploadImagesAPI","uploadImages","addPostAPI","addPost","id","likePostAPI","patch","likePost","unlikePostAPI","delete","unlikePost","loadPostsAPI","lastId","get","loadPosts","loadHashtagPostsAPI","encodeURIComponent","loadHashtagPosts","loadUserPostsAPI","loadUserPosts","loadPostAPI","loadPost","removePostAPI","removePost","addCommentAPI","postId","addComment","watchRetweet","watchUploadImages","watchLikePost","watchUnlikePost","watchAddPost","watchLoadHashtagPosts","watchLoadUserPosts","watchLoadPosts","watchLoadPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { all, takeLatest, delay, fork, put, throttle, call } from \"@redux-saga/core/effects\";\r\nimport shortId from 'shortid';\r\nimport {\r\n    ADD_COMMENT_FAILURE,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    generateDummyPost,\r\n    LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS,\r\n    LOAD_POSTS_FAILURE,\r\n    LOAD_HASHTAG_POSTS_REQUEST,\r\n    LOAD_HASHTAG_POSTS_SUCCESS,\r\n    LOAD_HASHTAG_POSTS_FAILURE,\r\n    LOAD_USER_POSTS_REQUEST,\r\n    LOAD_USER_POSTS_SUCCESS,\r\n    LOAD_USER_POSTS_FAILURE,\r\n    LOAD_POST_FAILURE,\r\n    LOAD_POST_REQUEST,\r\n    LOAD_POST_SUCCESS,\r\n    LIKE_POST_FAILURE,\r\n    LIKE_POST_REQUEST,\r\n    LIKE_POST_SUCCESS,\r\n    UNLIKE_POST_FAILURE,\r\n    UNLIKE_POST_REQUEST,\r\n    UNLIKE_POST_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n    UPLOAD_IMAGES_REQUEST,\r\n    UPLOAD_IMAGES_SUCCESS,\r\n    UPLOAD_IMAGES_FAILURE,\r\n    RETWEET_REQUEST,\r\n    RETWEET_SUCCESS,\r\n    RETWEET_FAILURE,\r\n  } from '../reducers/post';\r\n  import { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n  function retweetAPI(data) {\r\n    return axios.post(`/post/${data}/retweet`);\r\n}\r\n\r\nfunction* retweet(action) {\r\n    try {\r\n        // yield delay(1000);\r\n        const result = yield call(retweetAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n        // const id = shortId.generate();\r\n        yield put({\r\n            type: RETWEET_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: RETWEET_FAILURE,\r\n            error: err.response.data\r\n        });\r\n    }    \r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n    return axios.post('/post/images', data );\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n    try {\r\n        // yield delay(1000);\r\n        const result = yield call(uploadImagesAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n        // const id = shortId.generate();\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: err.response.data\r\n        });\r\n    }    \r\n}\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/post', data);   //formdata는 바로 data로 보내줘야함. 객체로 하면 안됨\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        // yield delay(1000);\r\n        const result = yield call(addPostAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n        // const id = shortId.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction likePostAPI() {\r\n    return axios.patch('/post/${data}/like');\r\n}\r\n\r\nfunction* likePost(action) {\r\n    try {      \r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction unlikePostAPI() {\r\n    return axios.delete('/post/${data}/like')\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n    try {      \r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            error: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction loadPostsAPI(lastId) {\r\n    return axios.get(`/posts?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {      \r\n        const result = yield call(loadPostsAPI, action.lastId);\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            error: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction loadHashtagPostsAPI(data, lastId) {\r\n    return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadHashtagPosts(action) {\r\n    try {      \r\n        const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_FAILURE,\r\n            error: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction loadUserPostsAPI(data, lastId) {\r\n    return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadUserPosts(action) {\r\n    try {      \r\n        const result = yield call(loadUserPostsAPI, action.data, action.lastId);\r\n        yield put({\r\n            type: LOAD_USER_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_USER_POSTS_FAILURE,\r\n            error: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction loadPostAPI(data) {\r\n    return axios.get(`/post/${data}`);\r\n}\r\n\r\nfunction* loadPost(action) {\r\n    try {      \r\n        const result = yield call(loadPostAPI, action.data);\r\n        yield put({\r\n            type: LOAD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POST_FAILURE,\r\n            error: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.post(`/post/${data}`)\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        const result = yield call(removePostAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n\r\n        yield put({         //post reducer 조작 부분\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({         //user reducer 조작 부분\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, data);  //POST /post/1/comment   1=postId\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        // yield delay(1000);\r\n        const result = yield call(addCommentAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction* watchRetweet() {\r\n    yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n    yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n\r\nfunction* watchLoadUserPosts() {\r\n    yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n    yield throttle(5000, LOAD_POST_REQUEST, loadPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchRetweet),\r\n        fork(watchUploadImages),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchAddPost),\r\n        fork(watchLoadUserPosts),\r\n        fork(watchLoadHashtagPosts),\r\n        fork(watchLoadPosts),\r\n        fork(watchLoadPost),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}