{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Tony\\\\Documents\\\\GitHub\\\\nordbird\\\\front\\\\components\\\\PostForm.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useCallback, useRef, useEffect } from 'react';\nimport { Button, Form, Input } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE, ADD_POST_REQUEST } from '../reducers/post';\nimport useInput from '../hooks/useInput';\n\nvar PostForm = function PostForm() {\n  _s();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      imagePaths = _useSelector.imagePaths,\n      addPostDone = _useSelector.addPostDone;\n\n  var dispatch = useDispatch();\n\n  var _useInput = useInput(''),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      text = _useInput2[0],\n      onChangeText = _useInput2[1],\n      setText = _useInput2[2];\n\n  useEffect(function () {\n    if (addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]); // const onChangeText = useCallback((e) => {\n  //     setText(e.target.value);\n  // }, []);\n\n  var onSubmit = useCallback(function () {\n    if (!text || !text.trim()) {\n      return alert('please write the form');\n    }\n\n    var formData = new FormData();\n    imagePaths.forEach(function (p) {\n      formData.append('image', p);\n    });\n\n    var _iterator = _createForOfIteratorHelper(formData),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var value = _step.value;\n        console.log(value);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    formData.append('content', text);\n    return dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  var imageInput = useRef();\n  var onClickImageUpload = useCallback(function () {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  var onChangeImages = useCallback(function (e) {\n    console.log('images', e.target.files);\n    var imageFormData = new FormData(); //FormData() 형식으로 보내준다 그리고 multer가 처리\n\n    [].forEach.call(e.target.files, function (f) {\n      imageFormData.append('image', f);\n    });\n\n    var _iterator2 = _createForOfIteratorHelper(imageFormData),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var value = _step2.value;\n        console.log(value);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  var onRemoveImage = useCallback(function (index) {\n    return function () {\n      dispatch({\n        type: REMOVE_IMAGE,\n        data: index\n      });\n    };\n  });\n  return __jsx(Form, {\n    style: {\n      margin: '10px 0 20px'\n    },\n    encType: \"multipart/form-data\",\n    onFinish: onSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, __jsx(Input.TextArea, {\n    value: text,\n    onChange: onChangeText,\n    maxLength: 140,\n    placeholder: 'what happened?',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, __jsx(\"input\", {\n    type: \"file\",\n    name: \"image\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    onChange: onChangeImages,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }), __jsx(Button, {\n    onClick: onClickImageUpload,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, \"Image upload\"), __jsx(Button, {\n    type: \"primary\",\n    style: {\n      \"float\": 'right'\n    },\n    htmlType: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }, \"Twit!\")), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, imagePaths.map(function (v, i) {\n    return (//map안에 콜백함수에 데이터를 넣고싶으면 고차함수를 사용.\n      __jsx(\"div\", {\n        key: v,\n        style: {\n          display: 'inline-block'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }\n      }, __jsx(\"img\", {\n        src: \"http://localhost:3065/\".concat(v),\n        style: {\n          width: '200px'\n        },\n        alt: v,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }\n      }), __jsx(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }\n      }, __jsx(Button, {\n        onClick: onRemoveImage(i),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 29\n        }\n      }, \"Delete\")))\n    );\n  })));\n};\n\n_s(PostForm, \"uNSEbxyZ52Mayt0tr31J38502f4=\", false, function () {\n  return [useSelector, useDispatch, useInput];\n});\n\n_c = PostForm;\nexport default PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["C:/Users/Tony/Documents/GitHub/nordbird/front/components/PostForm.js"],"names":["React","useCallback","useRef","useEffect","Button","Form","Input","useDispatch","useSelector","UPLOAD_IMAGES_REQUEST","REMOVE_IMAGE","ADD_POST_REQUEST","useInput","PostForm","state","post","imagePaths","addPostDone","dispatch","text","onChangeText","setText","onSubmit","trim","alert","formData","FormData","forEach","p","append","value","console","log","type","data","imageInput","onClickImageUpload","current","click","onChangeImages","e","target","files","imageFormData","call","f","onRemoveImage","index","margin","map","v","i","display","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useRef, useEffect  } from 'react';\r\nimport { Button, Form, Input } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE, ADD_POST_REQUEST } from '../reducers/post';\r\nimport useInput from '../hooks/useInput';\r\n\r\n\r\nconst PostForm = () => {\r\n    const { imagePaths, addPostDone } = useSelector((state) => state.post);\r\n    const dispatch = useDispatch();\r\n    const [text, onChangeText, setText] = useInput('');\r\n\r\n    useEffect(() => {\r\n        if (addPostDone) {\r\n            setText('');\r\n        }\r\n    }, [addPostDone])\r\n\r\n    // const onChangeText = useCallback((e) => {\r\n    //     setText(e.target.value);\r\n    // }, []);\r\n\r\n    const onSubmit = useCallback(() => {\r\n        if (!text || !text.trim()) {\r\n            return alert('please write the form');\r\n        }\r\n        const formData = new FormData();\r\n        imagePaths.forEach((p) => {\r\n            formData.append('image', p);\r\n        });\r\n        for (const value of formData) {\r\n            console.log(value);\r\n        }\r\n        formData.append('content', text);\r\n        return dispatch({\r\n            type: ADD_POST_REQUEST,\r\n            data: formData,\r\n        });\r\n    }, [text, imagePaths]);\r\n\r\n    const imageInput = useRef();\r\n    const onClickImageUpload = useCallback(() => {\r\n        imageInput.current.click();\r\n    }, [imageInput.current]);\r\n\r\n    const onChangeImages = useCallback((e) => {\r\n        console.log('images', e.target.files);\r\n        const imageFormData = new FormData(); //FormData() 형식으로 보내준다 그리고 multer가 처리\r\n        [].forEach.call(e.target.files, (f) => {\r\n            imageFormData.append('image', f);\r\n        });\r\n\r\n        for (const value of imageFormData) {\r\n            console.log(value);\r\n        }\r\n\r\n        dispatch({\r\n            type: UPLOAD_IMAGES_REQUEST,\r\n            data: imageFormData,\r\n        });\r\n    }, []);\r\n\r\n    const onRemoveImage = useCallback((index) => () => {\r\n        dispatch({\r\n            type: REMOVE_IMAGE,\r\n            data: index,\r\n        });\r\n    });\r\n\r\n    return (\r\n        <Form style={{ margin: '10px 0 20px' }} encType=\"multipart/form-data\" onFinish={onSubmit}>\r\n            <Input.TextArea\r\n                value={text}\r\n                onChange={onChangeText}\r\n                maxLength={140}\r\n                placeholder={'what happened?'}\r\n            />\r\n            <div>\r\n                <input type=\"file\" name=\"image\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n                <Button onClick={onClickImageUpload}>Image upload</Button>\r\n                <Button type=\"primary\" style={{ float: 'right' }} htmlType=\"submit\">Twit!</Button>\r\n            </div>\r\n            <div>\r\n                {imagePaths.map((v, i) => ( //map안에 콜백함수에 데이터를 넣고싶으면 고차함수를 사용.\r\n                    <div key={v} style={{ display: 'inline-block' }}>\r\n                        <img src={`http://localhost:3065/${v}`} style={{ width: '200px' }} alt={v} />\r\n                        <div>\r\n                            <Button onClick={onRemoveImage(i)}>Delete</Button>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </Form>\r\n    )\r\n};\r\n\r\nexport default PostForm;"]},"metadata":{},"sourceType":"module"}