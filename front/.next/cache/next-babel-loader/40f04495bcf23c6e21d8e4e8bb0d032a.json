{"ast":null,"code":"import { all, takeLatest, delay, fork, put } from \"@redux-saga/core/effects\"; // function addPostAPI(data) {\n//     yield axios.post('/api/post', data)\n// }\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\n\n    yield put({\n      type: 'ADD_POST_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'ADD_POST_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest('ADD_POST_REQUEST', addPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost)]);\n}","map":{"version":3,"sources":["C:/Users/Tony/Documents/GitHub/nordbird/front/sagas/post.js"],"names":["all","takeLatest","delay","fork","put","addPost","action","type","data","result","err","response","watchAddPost","postSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,EAA0BC,KAA1B,EAAiCC,IAAjC,EAAuCC,GAAvC,QAAkD,0BAAlD,C,CAGA;AACA;AACA;;AAEA,UAAUC,OAAV,CAAkBC,MAAlB,EAA0B;AACtB,MAAI;AACA,UAAMJ,KAAK,CAAC,IAAD,CAAX,CADA,CAEA;;AACA,UAAME,GAAG,CAAC;AACNG,MAAAA,IAAI,EAAE,kBADA;AAENC,MAAAA,IAAI,EAAEC,MAAM,CAACD;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOE,GAAP,EAAY;AACV,UAAMN,GAAG,CAAC;AACNG,MAAAA,IAAI,EAAE,kBADA;AAENC,MAAAA,IAAI,EAAEE,GAAG,CAACC,QAAJ,CAAaH;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUI,YAAV,GAAyB;AACrB,QAAMX,UAAU,CAAC,kBAAD,EAAqBI,OAArB,CAAhB;AACH;;AAED,eAAe,UAAUQ,QAAV,GAAqB;AAChC,QAAMb,GAAG,CAAC,CACNG,IAAI,CAACS,YAAD,CADE,CAAD,CAAT;AAGH","sourcesContent":["import { all, takeLatest, delay, fork, put } from \"@redux-saga/core/effects\";\r\n\r\n\r\n// function addPostAPI(data) {\r\n//     yield axios.post('/api/post', data)\r\n// }\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result = yield call(addPostAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n        yield put({\r\n            type: 'ADD_POST_SUCCESS',\r\n            data: result.data\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: 'ADD_POST_FAILURE',\r\n            data: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest('ADD_POST_REQUEST', addPost);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}