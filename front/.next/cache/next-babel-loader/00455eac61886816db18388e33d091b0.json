{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: 'tonymoon'\n    },\n    content: 'first post #express',\n    Images: [{\n      id: shortId.generate(),\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?update=2018726'\n    }, {\n      id: shortId.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }, {\n      id: shortId.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'nero'\n      },\n      content: 'congratulation!'\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'moon'\n      },\n      content: 'haha nice'\n    }]\n  }],\n  imagePaths: [],\n  hasMorePost: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(number).fill().map(function () {\n    return {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.paragraph,\n      Images: [{\n        src: faker.image.image()\n      }],\n      Comments: [{\n        User: {\n          id: shortId.generate(),\n          nickname: faker.name.findName()\n        },\n        content: faker.lorem.sentence()\n      }]\n    };\n  });\n}; // initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST'; //오타방지 차원에서 변수로 빼주는게 좋다. \n\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST'; //오타방지 차원에서 변수로 빼주는게 좋다. \n\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST'; //오타방지 차원에서 변수로 빼주는게 좋다. \n\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST'; //오타방지 차원에서 변수로 빼주는게 좋다. \n\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: 'Tony'\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: 'Tony'\n    }\n  };\n}; // 이전 상태를 액션을 통해 다음상태로 만들어내는 함수 (불변성은 지키면서.)\n\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  //immer (produce) 를 사용하면 알아서 불변성을 지켜준다.\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePost = draft.mainPosts.length < 50;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      // return {\n      //     ...state,\n      //     addPostLoading: true,\n      //     addPostDone: false,\n      //     addPostError: null,\n      // }\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n      // return {\n      //     ...state,\n      //     mainPosts: [dummyPost(action.data), ...state.mainPosts],\n      //     addPostLoading: false,\n      //     addPostDone: true,\n      // };\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      // return {\n      //     ...state,\n      //     addPostLoading: false,\n      //     addPostError: action.error,\n      // }\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      // return {\n      //     ...state,\n      //     removePostLoading: true,\n      //     removePostDone: false,\n      //     removePostError: null,\n      // }\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        break;\n      // return {\n      //     ...state,\n      //     mainPosts: state.mainPosts.filter((v) => v.id !== action.data),\n      //     removePostLoading: false,\n      //     removePostDone: true,\n      // };\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      // return {\n      //     ...state,\n      //     removePostLoading: false,\n      //     removePostError: action.error,\n      // }\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      // return {\n      //     ...state,\n      //     addCommentLoading: true,\n      //     addCommentDone: false,\n      //     addCommentError: null,\n      // }\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.postId;\n          });\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //     ...state,\n          //     mainPosts,\n          //     addCommentLoading: false,\n          //     addCommentDone: true,\n          // };            \n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      // return {\n      //     ...state,\n      //     addCommentLoading: false,\n      //     addCommentError: action.error,\n      // }\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Tony/Documents/GitHub/nordbird/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","hasMorePost","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","name","findName","lorem","paragraph","image","sentence","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","concat","length","error","unshift","filter","v","post","find","postId"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\nimport produce from 'immer';\r\nimport faker from 'faker';\r\n\r\nexport const initialState = {\r\n    mainPosts: [{\r\n        id: 1,\r\n        User: {\r\n            id: 1,\r\n            nickname: 'tonymoon',\r\n        },\r\n        content: 'first post #express',\r\n        Images: [{\r\n            id: shortId.generate(),\r\n            src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?update=2018726',\r\n        }, {\r\n            id: shortId.generate(),\r\n            src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\r\n        }, {\r\n            id: shortId.generate(),\r\n            src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\r\n        }],\r\n        Comments: [{\r\n            id: shortId.generate(),\r\n            User: {\r\n                id: shortId.generate(),\r\n                nickname: 'nero',\r\n            },\r\n            content: 'congratulation!',        \r\n        }, {\r\n            id: shortId.generate(),\r\n            User: {\r\n                id: shortId.generate(),\r\n                nickname: 'moon',\r\n            },\r\n            content: 'haha nice',\r\n        }]\r\n    }],\r\n    imagePaths: [],\r\n    hasMorePost: true,\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError: null,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n}\r\n\r\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n    id: shortId.generate(),\r\n    User: {\r\n        id: shortId.generate(),\r\n        nickname: faker.name.findName()\r\n    },\r\n    content: faker.lorem.paragraph,\r\n    Images: [{\r\n        src: faker.image.image(),\r\n    }],\r\n    Comments: [{\r\n        User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName()\r\n        },\r\n        content: faker.lorem.sentence(),\r\n    }],\r\n}));\r\n\r\n// initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';    //오타방지 차원에서 변수로 빼주는게 좋다. \r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS'; \r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE'; \r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';    //오타방지 차원에서 변수로 빼주는게 좋다. \r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS'; \r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE'; \r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';    //오타방지 차원에서 변수로 빼주는게 좋다. \r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS'; \r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE'; \r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';    //오타방지 차원에서 변수로 빼주는게 좋다. \r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS'; \r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE'; \r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id: 1,\r\n        nickname: 'Tony',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: 'Tony',\r\n    },\r\n});\r\n// 이전 상태를 액션을 통해 다음상태로 만들어내는 함수 (불변성은 지키면서.)\r\nconst reducer = (state = initialState, action) => {\r\n    //immer (produce) 를 사용하면 알아서 불변성을 지켜준다.\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case LOAD_POSTS_REQUEST:\r\n                draft.loadPostsLoading = true;\r\n                draft.loadPostsDone = false;\r\n                draft.loadPostsError = null;\r\n                break;\r\n            case LOAD_POSTS_SUCCESS:\r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsDone = true;\r\n                draft.mainPosts = action.data.concat(draft.mainPosts);\r\n                draft.hasMorePost = draft.mainPosts.length < 50;\r\n                break;    \r\n            case LOAD_POSTS_FAILURE:\r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsError = action.error;\r\n                break;            \r\n            case ADD_POST_REQUEST:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n                // return {\r\n                //     ...state,\r\n                //     addPostLoading: true,\r\n                //     addPostDone: false,\r\n                //     addPostError: null,\r\n                // }\r\n            case ADD_POST_SUCCESS:\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = true;\r\n                draft.mainPosts.unshift(dummyPost(action.data));\r\n                break;\r\n                // return {\r\n                //     ...state,\r\n                //     mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n                //     addPostLoading: false,\r\n                //     addPostDone: true,\r\n                // };\r\n    \r\n            case ADD_POST_FAILURE:\r\n                draft.addPostLoading = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n                // return {\r\n                //     ...state,\r\n                //     addPostLoading: false,\r\n                //     addPostError: action.error,\r\n                // }\r\n            case REMOVE_POST_REQUEST:\r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n                // return {\r\n                //     ...state,\r\n                //     removePostLoading: true,\r\n                //     removePostDone: false,\r\n                //     removePostError: null,\r\n                // }\r\n            case REMOVE_POST_SUCCESS:\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = true;\r\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n                break;\r\n                // return {\r\n                //     ...state,\r\n                //     mainPosts: state.mainPosts.filter((v) => v.id !== action.data),\r\n                //     removePostLoading: false,\r\n                //     removePostDone: true,\r\n                // };\r\n    \r\n            case REMOVE_POST_FAILURE:\r\n                draft.removePostLoading = false;\r\n                draft.removePostError = action.error;\r\n                break;\r\n                // return {\r\n                //     ...state,\r\n                //     removePostLoading: false,\r\n                //     removePostError: action.error,\r\n                // }\r\n            case ADD_COMMENT_REQUEST:\r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n                // return {\r\n                //     ...state,\r\n                //     addCommentLoading: true,\r\n                //     addCommentDone: false,\r\n                //     addCommentError: null,\r\n                // }\r\n            case ADD_COMMENT_SUCCESS: {\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n                post.Comments.unshift(dummyComment(action.data.content));\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;\r\n                // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n                // const post = { ...state.mainPosts[postIndex] };\r\n                // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = post;\r\n                // return {\r\n                //     ...state,\r\n                //     mainPosts,\r\n                //     addCommentLoading: false,\r\n                //     addCommentDone: true,\r\n                // };            \r\n            }\r\n            case ADD_COMMENT_FAILURE:\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentError = action.error;\r\n                break;\r\n                // return {\r\n                //     ...state,\r\n                //     addCommentLoading: false,\r\n                //     addCommentError: action.error,\r\n                // }\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n\r\n\r\n    \r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}