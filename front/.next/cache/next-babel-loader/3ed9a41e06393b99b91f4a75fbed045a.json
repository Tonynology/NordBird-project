{"ast":null,"code":"import { all, fork, put, delay, takeLatest, call } from \"@redux-saga/core/effects\";\nimport axios from 'axios';\nimport { FOLLOW_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_SUCCESS, LOAD_MY_INFO_FAILURE, CHANGE_NICKNAME_REQUEST, CHANGE_NICKNAME_SUCCESS, CHANGE_NICKNAME_FAILURE, REMOVE_FOLLOWER_REQUEST, REMOVE_FOLLOWER_SUCCESS, REMOVE_FOLLOWER_FAILURE, LOAD_FOLLOWINGS_REQUEST, LOAD_FOLLOWINGS_SUCCESS, LOAD_FOLLOWINGS_FAILURE } from '../reducers/user';\n\nfunction removeFollowerAPI(data) {\n  return axios.delete(`/user/follower/${data}`);\n}\n\nfunction* removeFollower(action) {\n  try {\n    const result = yield call(removeFollowerAPI, action.data); //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\n\n    yield put({\n      type: REMOVE_FOLLOWER_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_FOLLOWER_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadFollowersAPI(data) {\n  return axios.get('/user/followers', data);\n}\n\nfunction* loadFollowers(action) {\n  try {\n    const result = yield call(loadFollowersAPI, action.data); //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\n\n    yield put({\n      type: LOAD_FOLLOWERS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_FOLLOWERS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadFollowingsAPI(data) {\n  return axios.get('/user/followings', data);\n}\n\nfunction* loadFollowings(action) {\n  try {\n    const result = yield call(loadFollowingsAPI, action.data); //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\n\n    yield put({\n      type: LOAD_FOLLOWINGS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_FOLLOWINGS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction changeNicknameAPI(data) {\n  return axios.patch('/user/nickname', {\n    nickname: data\n  });\n}\n\nfunction* changeNickname(action) {\n  try {\n    const result = yield call(changeNicknameAPI, action.data); //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\n\n    yield put({\n      type: CHANGE_NICKNAME_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: CHANGE_NICKNAME_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadUserAPI(data) {\n  return axios.get('/user');\n}\n\nfunction* loadUser(action) {\n  try {\n    const result = yield call(loadUserAPI, action.data); //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\n\n    yield put({\n      type: LOAD_MY_INFO_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_MY_INFO_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction followAPI(data) {\n  return axios.post(`/user/${data}/follow`);\n}\n\nfunction* follow(action) {\n  try {\n    const result = yield call(followAPI, action.data); //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\n\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unfollowAPI(data) {\n  return axios.delete(`/user/${data}/follow`);\n}\n\nfunction* unfollow(action) {\n  try {\n    const result = yield call(unfollowAPI, action.data);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loginAPI(data) {\n  return axios.post('/user/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(loginAPI, action.data); //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logoutAPI() {\n  return axios.post('/logout');\n}\n\nfunction* logOut() {\n  try {\n    // yield delay(1000);\n    // const result = yield call(logoutAPI);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\n    yield call(logoutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  return axios.post('/user', data);\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    console.log(result);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchRemoveFollower() {\n  yield takeLatest(REMOVE_FOLLOWER_REQUEST, removeFollower);\n}\n\nfunction* watchLoadFollowing() {\n  yield takeLatest(LOAD_FOLLOWINGS_REQUEST, loadFollowings);\n}\n\nfunction* watchLoadFollowers() {\n  yield takeLatest(LOAD_FOLLOWERS_REQUEST, loadFollowers);\n}\n\nfunction* watchChangeNickname() {\n  yield takeLatest(CHANGE_NICKNAME_REQUEST, changeNickname);\n}\n\nfunction* watchLoadUser() {\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadUser);\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchRemoveFollower), fork(watchLoadFollowing), fork(watchLoadFollowers), fork(watchChangeNickname), fork(watchLoadUser), fork(watchFollow), fork(watchUnfollow), fork(watchLogin), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/Tony/Documents/GitHub/nordbird/front/sagas/user.js"],"names":["all","fork","put","delay","takeLatest","call","axios","FOLLOW_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","UNFOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","LOAD_MY_INFO_REQUEST","LOAD_MY_INFO_SUCCESS","LOAD_MY_INFO_FAILURE","CHANGE_NICKNAME_REQUEST","CHANGE_NICKNAME_SUCCESS","CHANGE_NICKNAME_FAILURE","REMOVE_FOLLOWER_REQUEST","REMOVE_FOLLOWER_SUCCESS","REMOVE_FOLLOWER_FAILURE","LOAD_FOLLOWINGS_REQUEST","LOAD_FOLLOWINGS_SUCCESS","LOAD_FOLLOWINGS_FAILURE","removeFollowerAPI","data","delete","removeFollower","action","result","type","err","console","error","response","loadFollowersAPI","get","loadFollowers","LOAD_FOLLOWERS_SUCCESS","LOAD_FOLLOWERS_FAILURE","loadFollowingsAPI","loadFollowings","changeNicknameAPI","patch","nickname","changeNickname","loadUserAPI","loadUser","followAPI","post","follow","unfollowAPI","unfollow","loginAPI","logIn","logoutAPI","logOut","signUpAPI","signUp","log","watchRemoveFollower","watchLoadFollowing","watchLoadFollowers","LOAD_FOLLOWERS_REQUEST","watchChangeNickname","watchLoadUser","watchFollow","watchUnfollow","watchLogin","watchLogOut","watchSignUp","userSaga"],"mappings":"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","sourcesContent":["import { all, fork, put, delay, takeLatest, call } from \"@redux-saga/core/effects\";\r\nimport axios from 'axios';\r\nimport {\r\n    FOLLOW_FAILURE,\r\n    FOLLOW_REQUEST,\r\n    FOLLOW_SUCCESS,\r\n    UNFOLLOW_FAILURE,\r\n    UNFOLLOW_REQUEST,\r\n    UNFOLLOW_SUCCESS,\r\n    LOG_IN_FAILURE,\r\n    LOG_IN_REQUEST,\r\n    LOG_IN_SUCCESS,\r\n    LOG_OUT_FAILURE,\r\n    LOG_OUT_REQUEST,\r\n    LOG_OUT_SUCCESS,\r\n    SIGN_UP_FAILURE,\r\n    SIGN_UP_REQUEST,\r\n    SIGN_UP_SUCCESS,  \r\n    LOAD_MY_INFO_REQUEST,\r\n    LOAD_MY_INFO_SUCCESS,\r\n    LOAD_MY_INFO_FAILURE,\r\n    CHANGE_NICKNAME_REQUEST,\r\n    CHANGE_NICKNAME_SUCCESS,\r\n    CHANGE_NICKNAME_FAILURE,\r\n    REMOVE_FOLLOWER_REQUEST,\r\n    REMOVE_FOLLOWER_SUCCESS,\r\n    REMOVE_FOLLOWER_FAILURE,\r\n    LOAD_FOLLOWINGS_REQUEST,\r\n    LOAD_FOLLOWINGS_SUCCESS,\r\n    LOAD_FOLLOWINGS_FAILURE,\r\n  } from '../reducers/user';\r\n  \r\nfunction removeFollowerAPI(data) {\r\n    return axios.delete(`/user/follower/${data}`);\r\n}\r\n\r\nfunction* removeFollower(action) {\r\n    try {\r\n        \r\n        const result = yield call(removeFollowerAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n        yield put({\r\n            type: REMOVE_FOLLOWER_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_FOLLOWER_FAILURE,\r\n            error: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction loadFollowersAPI(data) {\r\n    return axios.get('/user/followers', data);\r\n}\r\n\r\nfunction* loadFollowers(action) {\r\n    try {\r\n        \r\n        const result = yield call(loadFollowersAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n        yield put({\r\n            type: LOAD_FOLLOWERS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_FOLLOWERS_FAILURE,\r\n            error: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction loadFollowingsAPI(data) {\r\n    return axios.get('/user/followings', data);\r\n}\r\n\r\nfunction* loadFollowings(action) {\r\n    try {\r\n        \r\n        const result = yield call(loadFollowingsAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n        yield put({\r\n            type: LOAD_FOLLOWINGS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_FOLLOWINGS_FAILURE,\r\n            error: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction changeNicknameAPI(data) {\r\n    return axios.patch('/user/nickname', { nickname: data });\r\n}\r\n\r\nfunction* changeNickname(action) {\r\n    try {\r\n        \r\n        const result = yield call(changeNicknameAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n        yield put({\r\n            type: CHANGE_NICKNAME_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: CHANGE_NICKNAME_FAILURE,\r\n            error: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction loadUserAPI(data) {\r\n    return axios.get('/user')\r\n}\r\n\r\nfunction* loadUser(action) {\r\n    try {\r\n        \r\n        const result = yield call(loadUserAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n        yield put({\r\n            type: LOAD_MY_INFO_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_MY_INFO_FAILURE,\r\n            error: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction followAPI(data) {\r\n    return axios.post(`/user/${data}/follow`)\r\n}\r\n\r\nfunction* follow(action) {\r\n    try {\r\n        const result = yield call(followAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n        yield put({\r\n            type: FOLLOW_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: FOLLOW_FAILURE,\r\n            error: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction unfollowAPI(data) {\r\n    return axios.delete(`/user/${data}/follow`)\r\n}\r\n\r\nfunction* unfollow(action) {\r\n    try {\r\n        const result = yield call(unfollowAPI, action.data);\r\n        yield put({\r\n            type: UNFOLLOW_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UNFOLLOW_FAILURE,\r\n            error: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction loginAPI(data) {\r\n    return axios.post('/user/login', data)\r\n}\r\n\r\nfunction* logIn(action) {\r\n    try {\r\n        \r\n        const result = yield call(loginAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            error: err.response.data\r\n        });\r\n    }    \r\n}\r\n\r\nfunction logoutAPI() {\r\n    return axios.post('/logout')\r\n}\r\n\r\nfunction* logOut() {\r\n    try {\r\n        // yield delay(1000);\r\n        // const result = yield call(logoutAPI);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n        yield call(logoutAPI);\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: err.response.data\r\n        });\r\n    }    \r\n}\r\n\r\nfunction signUpAPI(data) {\r\n    return axios.post('/user', data);\r\n}\r\n\r\nfunction* signUp(action) {\r\n    try {\r\n        const result = yield call(signUpAPI, action.data);\r\n        console.log(result);\r\n        yield put({\r\n            type: SIGN_UP_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: err.response.data\r\n        });\r\n    }    \r\n}\r\n\r\nfunction* watchRemoveFollower() {\r\n    yield takeLatest(REMOVE_FOLLOWER_REQUEST, removeFollower);\r\n}\r\n\r\nfunction* watchLoadFollowing() {\r\n    yield takeLatest(LOAD_FOLLOWINGS_REQUEST, loadFollowings);\r\n}\r\n\r\nfunction* watchLoadFollowers() {\r\n    yield takeLatest(LOAD_FOLLOWERS_REQUEST, loadFollowers);\r\n}\r\n\r\nfunction* watchChangeNickname() {\r\n    yield takeLatest(CHANGE_NICKNAME_REQUEST, changeNickname);\r\n}\r\n\r\nfunction* watchLoadUser() {\r\n    yield takeLatest(LOAD_MY_INFO_REQUEST, loadUser);\r\n}\r\n\r\nfunction* watchFollow() {\r\n    yield takeLatest(FOLLOW_REQUEST, follow);\r\n}\r\n\r\nfunction* watchUnfollow() {\r\n    yield takeLatest(UNFOLLOW_REQUEST, unfollow);\r\n}\r\n\r\nfunction* watchLogin() {\r\n    yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchRemoveFollower),\r\n        fork(watchLoadFollowing),\r\n        fork(watchLoadFollowers),\r\n        fork(watchChangeNickname),\r\n        fork(watchLoadUser),\r\n        fork(watchFollow),\r\n        fork(watchUnfollow),\r\n        fork(watchLogin),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp)\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}