{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer'; // import faker from 'faker';\n\nexport const initialState = {\n  // mainPosts: [{\n  //     id: 1,\n  //     User: {\n  //         id: 1,\n  //         nickname: 'tonymoon',\n  //     },\n  //     content: 'first post #express',\n  //     Images: [{\n  //         id: shortId.generate(),\n  //         src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?update=2018726',\n  //     }, {\n  //         id: shortId.generate(),\n  //         src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\n  //     }, {\n  //         id: shortId.generate(),\n  //         src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\n  //     }],\n  //     Comments: [{\n  //         id: shortId.generate(),\n  //         User: {\n  //             id: shortId.generate(),\n  //             nickname: 'nero',\n  //         },\n  //         content: 'congratulation!',        \n  //     }, {\n  //         id: shortId.generate(),\n  //         User: {\n  //             id: shortId.generate(),\n  //             nickname: 'moon',\n  //         },\n  //         content: 'haha nice',\n  //     }]\n  // }],\n  mainPosts: [],\n  imagePaths: [],\n  singlePost: null,\n  hasMorePost: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n}; // export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//     id: shortId.generate(),\n//     User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName()\n//     },\n//     content: faker.lorem.paragraph,\n//     Images: [{\n//         src: faker.image.image(),\n//     }],\n//     Comments: [{\n//         User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName()\n//         },\n//         content: faker.lorem.sentence(),\n//     }],\n// }));\n// initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n\nexport const UPLOAD_IMAGE_REQUEST = 'UPLOAD_IMAGE_REQUEST';\nexport const UPLOAD_IMAGE_SUCCESS = 'UPLOAD_IMAGE_SUCCESS';\nexport const UPLOAD_IMAGE_FAILURE = 'UPLOAD_IMAGE_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST'; //오타방지 차원에서 변수로 빼주는게 좋다. \n\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n}); // const dummyPost = (data) => ({\n//     id: shortId.generate(),\n//     content: data,\n//     User: {\n//         id: 1,\n//         nickname: 'Tony',\n//     },\n//     Images: [],\n//     Comments: [],\n// });\n// const dummyComment = (data) => ({\n//     id: data.id,\n//     content: data.content,\n//     User: {\n//         id: 1,\n//         nickname: 'Tony',\n//     },\n// });\n// 이전 상태를 액션을 통해 다음상태로 만들어내는 함수 (불변성은 지키면서.)\n\nconst reducer = (state = initialState, action) => {\n  //immer (produce) 를 사용하면 알아서 불변성을 지켜준다.\n  return produce(state, draft => {\n    switch (action.type) {\n      case RETWEET_REQUEST:\n        draft.retweetLoading = true;\n        draft.retweetDone = false;\n        draft.retweetError = null;\n        break;\n\n      case RETWEET_SUCCESS:\n        {\n          draft.retweetLoading = false;\n          draft.retweetDone = true;\n          draft.mainPosts.unshift(actino.data);\n          break;\n        }\n\n      case RETWEET_FAILURE:\n        draft.retweetLoading = false;\n        draft.retweetError = action.error;\n        break;\n\n      case REMOVE_IMAGE:\n        //이건 동기 함수, 나머진 비동기\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n        break;\n\n      case UPLOAD_IMAGE_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n\n      case UPLOAD_IMAGE_SUCCESS:\n        {\n          draft.imagePaths = action.data;\n          draft.uploadImagesLoading = false;\n          draft.uploadImagesDone = true;\n          break;\n        }\n\n      case UPLOAD_IMAGE_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n\n      case LIKE_POST_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers.push({\n            id: action.data.UserId\n          });\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n\n      case LOAD_USER_POSTS_REQUEST:\n      case LOAD_HASHTAG_POSTS_REQUEST:\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_USER_POSTS_SUCCESS:\n      case LOAD_HASHTAG_POSTS_SUCCESS:\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.mainPosts.concat(action.data);\n        draft.hasMorePost = draft.data.length === 10;\n        break;\n\n      case LOAD_USER_POSTS_FAILURE:\n      case LOAD_HASHTAG_POSTS_FAILURE:\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.singlePost = action.data;\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      // return {\n      //     ...state,\n      //     addPostLoading: true,\n      //     addPostDone: false,\n      //     addPostError: null,\n      // }\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        draft.imagePaths = [];\n        break;\n      // return {\n      //     ...state,\n      //     mainPosts: [dummyPost(action.data), ...state.mainPosts],\n      //     addPostLoading: false,\n      //     addPostDone: true,\n      // };\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      // return {\n      //     ...state,\n      //     addPostLoading: false,\n      //     addPostError: action.error,\n      // }\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      // return {\n      //     ...state,\n      //     removePostLoading: true,\n      //     removePostDone: false,\n      //     removePostError: null,\n      // }\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n        break;\n      // return {\n      //     ...state,\n      //     mainPosts: state.mainPosts.filter((v) => v.id !== action.data),\n      //     removePostLoading: false,\n      //     removePostDone: true,\n      // };\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      // return {\n      //     ...state,\n      //     removePostLoading: false,\n      //     removePostError: action.error,\n      // }\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      // return {\n      //     ...state,\n      //     addCommentLoading: true,\n      //     addCommentDone: false,\n      //     addCommentError: null,\n      // }\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Comments.unshift(action.data);\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //     ...state,\n          //     mainPosts,\n          //     addCommentLoading: false,\n          //     addCommentDone: true,\n          // };            \n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      // return {\n      //     ...state,\n      //     addCommentLoading: false,\n      //     addCommentError: action.error,\n      // }\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Tony/Documents/GitHub/nordbird/front/reducers/post.js"],"names":["shortId","produce","initialState","mainPosts","imagePaths","singlePost","hasMorePost","loadPostsLoading","loadPostsDone","loadPostsError","loadPostLoading","loadPostDone","loadPostError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","UPLOAD_IMAGE_REQUEST","UPLOAD_IMAGE_SUCCESS","UPLOAD_IMAGE_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_IMAGE","addPost","data","type","addComment","reducer","state","action","draft","unshift","actino","error","filter","v","i","post","find","id","PostId","Likers","push","UserId","concat","length","Comments"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\nimport produce from 'immer';\r\n// import faker from 'faker';\r\n\r\nexport const initialState = {\r\n    // mainPosts: [{\r\n    //     id: 1,\r\n    //     User: {\r\n    //         id: 1,\r\n    //         nickname: 'tonymoon',\r\n    //     },\r\n    //     content: 'first post #express',\r\n    //     Images: [{\r\n    //         id: shortId.generate(),\r\n    //         src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?update=2018726',\r\n    //     }, {\r\n    //         id: shortId.generate(),\r\n    //         src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\r\n    //     }, {\r\n    //         id: shortId.generate(),\r\n    //         src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\r\n    //     }],\r\n    //     Comments: [{\r\n    //         id: shortId.generate(),\r\n    //         User: {\r\n    //             id: shortId.generate(),\r\n    //             nickname: 'nero',\r\n    //         },\r\n    //         content: 'congratulation!',        \r\n    //     }, {\r\n    //         id: shortId.generate(),\r\n    //         User: {\r\n    //             id: shortId.generate(),\r\n    //             nickname: 'moon',\r\n    //         },\r\n    //         content: 'haha nice',\r\n    //     }]\r\n    // }],\r\n    mainPosts: [],\r\n    imagePaths: [],\r\n    singlePost: null,\r\n    hasMorePost: true,\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError: null,\r\n    loadPostLoading: false,\r\n    loadPostDone: false,\r\n    loadPostError: null,\r\n    likePostLoading: false,\r\n    likePostDone: false,\r\n    likePostError: null,\r\n    unlikePostLoading: false,\r\n    unlikePostDone: false,\r\n    unlikePostError: null,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n    uploadImagesLoading: false,\r\n    uploadImagesDone: false,\r\n    uploadImagesError: null,\r\n    retweetLoading: false,\r\n    retweetDone: false,\r\n    retweetError: null,\r\n}\r\n\r\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n//     id: shortId.generate(),\r\n//     User: {\r\n//         id: shortId.generate(),\r\n//         nickname: faker.name.findName()\r\n//     },\r\n//     content: faker.lorem.paragraph,\r\n//     Images: [{\r\n//         src: faker.image.image(),\r\n//     }],\r\n//     Comments: [{\r\n//         User: {\r\n//             id: shortId.generate(),\r\n//             nickname: faker.name.findName()\r\n//         },\r\n//         content: faker.lorem.sentence(),\r\n//     }],\r\n// }));\r\n\r\n// initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\r\n\r\nexport const UPLOAD_IMAGE_REQUEST = 'UPLOAD_IMAGE_REQUEST';     \r\nexport const UPLOAD_IMAGE_SUCCESS = 'UPLOAD_IMAGE_SUCCESS'; \r\nexport const UPLOAD_IMAGE_FAILURE = 'UPLOAD_IMAGE_FAILURE'; \r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';    //오타방지 차원에서 변수로 빼주는게 좋다. \r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS'; \r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE'; \r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';    \r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS'; \r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE'; \r\n\r\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';    \r\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS'; \r\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE'; \r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';    \r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS'; \r\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE'; \r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';    \r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS'; \r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE'; \r\n\r\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';    \r\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS'; \r\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE'; \r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';    \r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS'; \r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE'; \r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';   \r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS'; \r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE'; \r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';    \r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS'; \r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE'; \r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';    \r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS'; \r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE'; \r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\n\r\n// const dummyPost = (data) => ({\r\n//     id: shortId.generate(),\r\n//     content: data,\r\n//     User: {\r\n//         id: 1,\r\n//         nickname: 'Tony',\r\n//     },\r\n//     Images: [],\r\n//     Comments: [],\r\n// });\r\n\r\n// const dummyComment = (data) => ({\r\n//     id: data.id,\r\n//     content: data.content,\r\n//     User: {\r\n//         id: 1,\r\n//         nickname: 'Tony',\r\n//     },\r\n// });\r\n\r\n// 이전 상태를 액션을 통해 다음상태로 만들어내는 함수 (불변성은 지키면서.)\r\nconst reducer = (state = initialState, action) => {\r\n    //immer (produce) 를 사용하면 알아서 불변성을 지켜준다.\r\n    return produce(state, (draft) => {\r\n        switch (action.type) { \r\n            case RETWEET_REQUEST:\r\n                draft.retweetLoading = true;\r\n                draft.retweetDone = false;\r\n                draft.retweetError = null;\r\n                break;\r\n            case RETWEET_SUCCESS:{\r\n                draft.retweetLoading = false;\r\n                draft.retweetDone = true;   \r\n                draft.mainPosts.unshift(actino.data);             \r\n                break;    \r\n            }\r\n            case RETWEET_FAILURE:\r\n                draft.retweetLoading = false;\r\n                draft.retweetError = action.error;\r\n                break;            \r\n            case REMOVE_IMAGE:  //이건 동기 함수, 나머진 비동기\r\n                draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\r\n                break;\r\n            case UPLOAD_IMAGE_REQUEST:\r\n                draft.uploadImagesLoading = true;\r\n                draft.uploadImagesDone = false;\r\n                draft.uploadImagesError = null;\r\n                break;\r\n            case UPLOAD_IMAGE_SUCCESS:{\r\n                draft.imagePaths = action.data;\r\n                draft.uploadImagesLoading = false;\r\n                draft.uploadImagesDone = true;                \r\n                break;    \r\n            }\r\n            case UPLOAD_IMAGE_FAILURE:\r\n                draft.uploadImagesLoading = false;\r\n                draft.uploadImagesError = action.error;\r\n                break;            \r\n            case LIKE_POST_REQUEST:\r\n                draft.likePostLoading = true;\r\n                draft.likePostDone = false;\r\n                draft.likePostError = null;\r\n                break;\r\n            case LIKE_POST_SUCCESS:{\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n                post.Likers.push({ id: action.data.UserId });\r\n                draft.likePostLoading = false;\r\n                draft.likePostDone = true;                \r\n                break;    \r\n            }\r\n            case LIKE_POST_FAILURE:\r\n                draft.likePostLoading = false;\r\n                draft.likePostError = action.error;\r\n                break;            \r\n            case UNLIKE_POST_REQUEST:\r\n                draft.unlikePostLoading = true;\r\n                draft.unlikePostDone = false;\r\n                draft.unlikePostError = null;\r\n                break;\r\n            case UNLIKE_POST_SUCCESS:{\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n                post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n                draft.unlikePostLoading = false;\r\n                draft.unlikePostDone = true;                \r\n                break;    \r\n            }\r\n            case UNLIKE_POST_FAILURE:\r\n                draft.unlikePostLoading = false;\r\n                draft.unlikePostError = action.error;\r\n                    break;          \r\n            case LOAD_USER_POSTS_REQUEST:\r\n            case LOAD_HASHTAG_POSTS_REQUEST:         \r\n            case LOAD_POSTS_REQUEST:\r\n                draft.loadPostsLoading = true;\r\n                draft.loadPostsDone = false;\r\n                draft.loadPostsError = null;\r\n                break;\r\n            case LOAD_USER_POSTS_SUCCESS:\r\n            case LOAD_HASHTAG_POSTS_SUCCESS:   \r\n            case LOAD_POSTS_SUCCESS:\r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsDone = true;\r\n                draft.mainPosts = action.mainPosts.concat(action.data);\r\n                draft.hasMorePost = draft.data.length === 10;\r\n                break;    \r\n            case LOAD_USER_POSTS_FAILURE:\r\n            case LOAD_HASHTAG_POSTS_FAILURE:\r\n            case LOAD_POSTS_FAILURE:\r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsError = action.error;\r\n                break;            \r\n            case LOAD_POST_REQUEST:\r\n            draft.loadPostLoading = true;\r\n            draft.loadPostDone = false;\r\n            draft.loadPostError = null;\r\n            break;\r\n            case LOAD_POST_SUCCESS:\r\n                draft.loadPostLoading = false;\r\n                draft.loadPostDone = true;\r\n                draft.singlePost = action.data;\r\n                break;    \r\n            case LOAD_POST_FAILURE:\r\n                draft.loadPostLoading = false;\r\n                draft.loadPostError = action.error;\r\n                break;              \r\n            case ADD_POST_REQUEST:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n                // return {\r\n                //     ...state,\r\n                //     addPostLoading: true,\r\n                //     addPostDone: false,\r\n                //     addPostError: null,\r\n                // }\r\n            case ADD_POST_SUCCESS:\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = true;\r\n                draft.mainPosts.unshift(action.data);\r\n                draft.imagePaths = [];\r\n                break;\r\n                // return {\r\n                //     ...state,\r\n                //     mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n                //     addPostLoading: false,\r\n                //     addPostDone: true,\r\n                // };\r\n    \r\n            case ADD_POST_FAILURE:\r\n                draft.addPostLoading = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n                // return {\r\n                //     ...state,\r\n                //     addPostLoading: false,\r\n                //     addPostError: action.error,\r\n                // }\r\n            case REMOVE_POST_REQUEST:\r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n                // return {\r\n                //     ...state,\r\n                //     removePostLoading: true,\r\n                //     removePostDone: false,\r\n                //     removePostError: null,\r\n                // }\r\n            case REMOVE_POST_SUCCESS:\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = true;\r\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\r\n                break;\r\n                // return {\r\n                //     ...state,\r\n                //     mainPosts: state.mainPosts.filter((v) => v.id !== action.data),\r\n                //     removePostLoading: false,\r\n                //     removePostDone: true,\r\n                // };\r\n    \r\n            case REMOVE_POST_FAILURE:\r\n                draft.removePostLoading = false;\r\n                draft.removePostError = action.error;\r\n                break;\r\n                // return {\r\n                //     ...state,\r\n                //     removePostLoading: false,\r\n                //     removePostError: action.error,\r\n                // }\r\n            case ADD_COMMENT_REQUEST:\r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n                // return {\r\n                //     ...state,\r\n                //     addCommentLoading: true,\r\n                //     addCommentDone: false,\r\n                //     addCommentError: null,\r\n                // }\r\n            case ADD_COMMENT_SUCCESS: {\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n                post.Comments.unshift(action.data);\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;\r\n                // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n                // const post = { ...state.mainPosts[postIndex] };\r\n                // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = post;\r\n                // return {\r\n                //     ...state,\r\n                //     mainPosts,\r\n                //     addCommentLoading: false,\r\n                //     addCommentDone: true,\r\n                // };            \r\n            }\r\n            case ADD_COMMENT_FAILURE:\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentError = action.error;\r\n                break;\r\n                // return {\r\n                //     ...state,\r\n                //     addCommentLoading: false,\r\n                //     addCommentError: action.error,\r\n                // }\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n\r\n\r\n    \r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}