{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(likePost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(unlikePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchLikePost),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnlikePost),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, takeLatest, delay, fork, put, throttle } from \"@redux-saga/core/effects\";\nimport shortId from 'shortid';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, generateDummyPost, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LIKE_POSTS_FAILURE, LIKE_POST_REQUEST, LIKE_POSTS_SUCCESS, UNLIKE_POSTS_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', {\n    content: data\n  });\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction likePostAPI(data) {\n  return axios.patch('/post/${data}/like');\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: LIKE_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            type: LIKE_POSTS_FAILURE,\n            data: _context2.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction unlikePostAPI(data) {\n  return axios[\"delete\"]('/post/${data}/like');\n}\n\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: UNLIKE_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: UNLIKE_POSTS_FAILURE,\n            data: _context3.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction loadPostsAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction loadPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPosts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(loadPostsAPI, action.data);\n\n        case 3:\n          result = _context4.sent;\n          _context4.next = 6;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context4.next = 12;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 12;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            data: _context4.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 8]]);\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction removePost(action) {\n  return _regeneratorRuntime.wrap(function removePost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context5.next = 5;\n          return put({\n            //post reducer 조작 부분\n            type: REMOVE_POST_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context5.next = 7;\n          return put({\n            //user reducer 조작 부분\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 7:\n          _context5.next = 13;\n          break;\n\n        case 9:\n          _context5.prev = 9;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 13;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            data: _context5.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 9]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data); //POST /post/1/comment   1=postId\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context6.sent;\n          _context6.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context6.next = 13;\n          break;\n\n        case 8:\n          _context6.prev = 8;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.error(_context6.t0);\n          _context6.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context6.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 8]]);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return all([fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}","map":{"version":3,"sources":["C:/Users/Tony/Documents/GitHub/nordbird/front/sagas/post.js"],"names":["addPost","likePost","unlikePost","loadPosts","removePost","addComment","watchLikePost","watchUnlikePost","watchAddPost","watchLoadPosts","watchRemovePost","watchAddComment","postSaga","all","takeLatest","delay","fork","put","throttle","shortId","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","generateDummyPost","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LIKE_POSTS_FAILURE","LIKE_POST_REQUEST","LIKE_POSTS_SUCCESS","UNLIKE_POSTS_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","axios","post","content","action","call","result","type","id","response","likePostAPI","patch","unlikePostAPI","loadPostsAPI","removePostAPI","addCommentAPI","postId","console","error"],"mappings":"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","sourcesContent":["import { all, takeLatest, delay, fork, put, throttle } from \"@redux-saga/core/effects\";\r\nimport shortId from 'shortid';\r\nimport {\r\n    ADD_COMMENT_FAILURE,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    generateDummyPost,\r\n    LOAD_POSTS_FAILURE,\r\n    LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS,\r\n    LIKE_POSTS_FAILURE,\r\n    LIKE_POST_REQUEST,\r\n    LIKE_POSTS_SUCCESS,\r\n    UNLIKE_POSTS_FAILURE,\r\n    UNLIKE_POST_REQUEST,\r\n    UNLIKE_POSTS_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n  } from '../reducers/post';\r\n  import { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/post', { content: data });\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        // yield delay(1000);\r\n        const result = yield call(addPostAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n        // const id = shortId.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction likePostAPI(data) {\r\n    return axios.patch('/post/${data}/like');\r\n}\r\n\r\nfunction* likePost(action) {\r\n    try {      \r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type: LIKE_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LIKE_POSTS_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n    return axios.delete('/post/${data}/like')\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n    try {      \r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type: UNLIKE_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: UNLIKE_POSTS_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction loadPostsAPI(data) {\r\n    return axios.post('/post', data)\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {      \r\n        const result = yield call(loadPostsAPI, action.data);\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.post('/api/post', data)\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result = yield call(addPostAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n\r\n        yield put({         //post reducer 조작 부분\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data,\r\n        });\r\n        yield put({         //user reducer 조작 부분\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, data);  //POST /post/1/comment   1=postId\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        // yield delay(1000);\r\n        const result = yield call(addPostAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchAddPost),\r\n        fork(watchLoadPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}