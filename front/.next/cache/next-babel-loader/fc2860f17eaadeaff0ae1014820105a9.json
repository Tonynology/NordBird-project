{"ast":null,"code":"import { all, takeLatest, delay, fork, put, throttle, call } from \"@redux-saga/core/effects\";\nimport shortId from 'shortid';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, generateDummyPost, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(addPostAPI, action.data); //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\n    // const id = shortId.generate();\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI() {\n  return axios.patch('/post/${data}/like');\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI() {\n  return axios.delete('/post/${data}/like');\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(`/post?lastId=$(lastId || 0)`);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\n\n    yield put({\n      //post reducer 조작 부분\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      //user reducer 조작 부분\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); //POST /post/1/comment   1=postId\n}\n\nfunction* addComment(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(addCommentAPI, action.data); //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/Tony/Documents/GitHub/nordbird/front/sagas/post.js"],"names":["all","takeLatest","delay","fork","put","throttle","call","shortId","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","generateDummyPost","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","axios","post","content","addPost","action","result","type","id","err","response","likePostAPI","patch","likePost","unlikePostAPI","delete","unlikePost","loadPostsAPI","lastId","get","loadPosts","console","error","removePostAPI","removePost","addCommentAPI","postId","addComment","watchLikePost","watchUnlikePost","watchAddPost","watchLoadPosts","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, takeLatest, delay, fork, put, throttle, call } from \"@redux-saga/core/effects\";\r\nimport shortId from 'shortid';\r\nimport {\r\n    ADD_COMMENT_FAILURE,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    generateDummyPost,\r\n    LOAD_POSTS_FAILURE,\r\n    LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS,\r\n    LIKE_POST_FAILURE,\r\n    LIKE_POST_REQUEST,\r\n    LIKE_POST_SUCCESS,\r\n    UNLIKE_POST_FAILURE,\r\n    UNLIKE_POST_REQUEST,\r\n    UNLIKE_POST_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n  } from '../reducers/post';\r\n  import { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/post', { content: data });\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        // yield delay(1000);\r\n        const result = yield call(addPostAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n        // const id = shortId.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction likePostAPI() {\r\n    return axios.patch('/post/${data}/like');\r\n}\r\n\r\nfunction* likePost(action) {\r\n    try {      \r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction unlikePostAPI() {\r\n    return axios.delete('/post/${data}/like')\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n    try {      \r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction loadPostsAPI(lastId) {\r\n    return axios.get(`/post?lastId=$(lastId || 0)`)\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {      \r\n        const result = yield call(loadPostsAPI, action.lastId);\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.post('/api/post', data)\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result = yield call(addPostAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n\r\n        yield put({         //post reducer 조작 부분\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data,\r\n        });\r\n        yield put({         //user reducer 조작 부분\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, data);  //POST /post/1/comment   1=postId\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        // yield delay(1000);\r\n        const result = yield call(addCommentAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchAddPost),\r\n        fork(watchLoadPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}