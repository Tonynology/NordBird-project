{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Form, Input, Button } from 'antd';\nimport { useCallback, useEffect } from 'react';\nimport useInput from '../hooks/useInput';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\nvar CommentForm = function CommentForm(_ref) {\n  var post = _ref.post;\n  var dispatch = useDispatch();\n  var id = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      addCommentDone = _useSelector.addCommentDone,\n      addCommentLoading = _useSelector.addCommentLoading;\n\n  var _useInput = useInput(''),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      commentText = _useInput2[0],\n      onChangeCommentText = _useInput2[1],\n      setCommentText = _useInput2[2]; //useInput은  커스텀이다.\n  // == const [commentText, setCommentText] = useState('');\n  // const onChangeCommentText = useCallback(()~);\n\n\n  useEffect(function () {\n    if (addCommentDone) {\n      setCommentText('');\n    }\n  }, [addCommentDone]);\n  var onSubmitComment = useCallback(function () {\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        content: commentText,\n        postId: post.id,\n        userId: id\n      }\n    });\n  }, [commentText, id]);\n  return __jsx(Form, {\n    onFinish: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    value: commentText,\n    onChange: onChangeCommentText,\n    rows: 4\n  }), __jsx(Button, {\n    style: {\n      position: 'absolute',\n      right: 0,\n      bottom: -40\n    },\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: addCommentLoading\n  }, \"TWIT~~\")));\n};\n\nexport default CommentForm;","map":{"version":3,"sources":["C:/Users/Tony/Documents/GitHub/nordbird/front/components/CommentForm.js"],"names":["Form","Input","Button","useCallback","useEffect","useInput","useDispatch","useSelector","ADD_COMMENT_REQUEST","CommentForm","post","dispatch","id","state","user","me","addCommentDone","addCommentLoading","commentText","onChangeCommentText","setCommentText","onSubmitComment","type","data","content","postId","userId","position","right","bottom"],"mappings":";;;AAAA,SAASA,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,QAAoC,MAApC;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAwC,OAAxC;AAEA,OAAOC,QAAP,MAAqB,mBAArB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,mBAAT,QAAoC,kBAApC;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;AAC9B,MAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACA,MAAMM,EAAE,GAAGL,WAAW,CAAC,UAACM,KAAD;AAAA;;AAAA,6BAAWA,KAAK,CAACC,IAAN,CAAWC,EAAtB,mDAAW,eAAeH,EAA1B;AAAA,GAAD,CAAtB;;AAF8B,qBAGgBL,WAAW,CAAC,UAACM,KAAD;AAAA,WAAWA,KAAK,CAACH,IAAjB;AAAA,GAAD,CAH3B;AAAA,MAGtBM,cAHsB,gBAGtBA,cAHsB;AAAA,MAGNC,iBAHM,gBAGNA,iBAHM;;AAAA,kBAI6BZ,QAAQ,CAAC,EAAD,CAJrC;AAAA;AAAA,MAIvBa,WAJuB;AAAA,MAIVC,mBAJU;AAAA,MAIWC,cAJX,kBAI8C;AAE5E;AACA;;;AAEAhB,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIY,cAAJ,EAAoB;AAChBI,MAAAA,cAAc,CAAC,EAAD,CAAd;AACH;AACJ,GAJQ,EAIN,CAACJ,cAAD,CAJM,CAAT;AAMA,MAAMK,eAAe,GAAGlB,WAAW,CAAC,YAAM;AACtCQ,IAAAA,QAAQ,CAAC;AACLW,MAAAA,IAAI,EAAEd,mBADD;AAELe,MAAAA,IAAI,EAAE;AAAEC,QAAAA,OAAO,EAAEN,WAAX;AAAwBO,QAAAA,MAAM,EAAEf,IAAI,CAACE,EAArC;AAAyCc,QAAAA,MAAM,EAAEd;AAAjD;AAFD,KAAD,CAAR;AAKH,GANkC,EAMhC,CAACM,WAAD,EAAcN,EAAd,CANgC,CAAnC;AAQA,SACI,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAES;AAAhB,KACI,MAAC,IAAD,CAAM,IAAN,QACI,MAAC,KAAD,CAAO,QAAP;AAAgB,IAAA,KAAK,EAAEH,WAAvB;AAAoC,IAAA,QAAQ,EAAEC,mBAA9C;AAAmE,IAAA,IAAI,EAAE;AAAzE,IADJ,EAEI,MAAC,MAAD;AACI,IAAA,KAAK,EAAE;AAAEQ,MAAAA,QAAQ,EAAE,UAAZ;AAAwBC,MAAAA,KAAK,EAAE,CAA/B;AAAkCC,MAAAA,MAAM,EAAE,CAAC;AAA3C,KADX;AAEI,IAAA,IAAI,EAAC,SAFT;AAGI,IAAA,QAAQ,EAAC,QAHb;AAII,IAAA,OAAO,EAAEZ;AAJb,cAFJ,CADJ,CADJ;AAeH,CAtCD;;AA4CA,eAAeR,WAAf","sourcesContent":["import { Form, Input, Button } from 'antd';\r\nimport { useCallback, useEffect  } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport useInput from '../hooks/useInput';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\r\n\r\nconst CommentForm = ({ post }) => {\r\n    const dispatch = useDispatch();\r\n    const id = useSelector((state) => state.user.me?.id);\r\n    const { addCommentDone, addCommentLoading } = useSelector((state) => state.post);\r\n    const [commentText, onChangeCommentText, setCommentText] = useInput('');    //useInput은  커스텀이다.\r\n\r\n    // == const [commentText, setCommentText] = useState('');\r\n    // const onChangeCommentText = useCallback(()~);\r\n\r\n    useEffect(() => {\r\n        if (addCommentDone) {\r\n            setCommentText('');\r\n        }\r\n    }, [addCommentDone]);\r\n\r\n    const onSubmitComment = useCallback(() => {\r\n        dispatch({\r\n            type: ADD_COMMENT_REQUEST,\r\n            data: { content: commentText, postId: post.id, userId: id },\r\n        });\r\n        \r\n    }, [commentText, id]);\r\n\r\n    return (\r\n        <Form onFinish={onSubmitComment}>\r\n            <Form.Item>\r\n                <Input.TextArea value={commentText} onChange={onChangeCommentText} rows={4} />\r\n                <Button \r\n                    style={{ position: 'absolute', right: 0, bottom: -40 }}\r\n                    type=\"primary\" \r\n                    htmlType=\"submit\"\r\n                    loading={addCommentLoading}\r\n                >\r\n                        TWIT~~\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n\r\nCommentForm.propTypes = {\r\n    post: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default CommentForm;"]},"metadata":{},"sourceType":"module"}