{"ast":null,"code":"import { all, takeLatest, delay, fork, put } from \"@redux-saga/core/effects\";\nimport shortId from 'shortid';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, generateDummyPost, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\n\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\n\n    yield put({\n      //post reducer 조작 부분\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      //user reducer 조작 부분\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/Tony/Documents/GitHub/nordbird/front/sagas/post.js"],"names":["all","takeLatest","delay","fork","put","shortId","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","generateDummyPost","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","axios","post","addPost","action","id","generate","type","content","err","response","loadPostsAPI","loadPosts","removePostAPI","removePost","addCommentAPI","postId","addComment","watchAddPost","watchLoadPosts","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, takeLatest, delay, fork, put } from \"@redux-saga/core/effects\";\r\nimport shortId from 'shortid';\r\nimport {\r\n    ADD_COMMENT_FAILURE,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    generateDummyPost,\r\n    LOAD_POSTS_FAILURE,\r\n    LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n  } from '../reducers/post';\r\n  import { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/post', data)\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result = yield call(addPostAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                content: action.data,\r\n            },\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction loadPostsAPI(data) {\r\n    return axios.post('/api/post', data)\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        yield delay(1000);        \r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: generateDummyPost(10),\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.post('/api/post', data)\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result = yield call(addPostAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n\r\n        yield put({         //post reducer 조작 부분\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data,\r\n        });\r\n        yield put({         //user reducer 조작 부분\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/api/post/${data.postId}/comment`, data)\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result = yield call(addPostAPI, action.data);    //call을 쓰면 동기, fork를 쓰면 비동기. result값을 받고 진행해야 하므로 call을 사용.\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }    \r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchLoadPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}